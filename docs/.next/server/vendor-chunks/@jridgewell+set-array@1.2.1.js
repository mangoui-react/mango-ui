"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@jridgewell+set-array@1.2.1";
exports.ids = ["vendor-chunks/@jridgewell+set-array@1.2.1"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.mjs":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.mjs ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SetArray: () => (/* binding */ SetArray),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   pop: () => (/* binding */ pop),\n/* harmony export */   put: () => (/* binding */ put),\n/* harmony export */   remove: () => (/* binding */ remove)\n/* harmony export */ });\n/**\n * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the\n * index of the `key` in the backing array.\n *\n * This is designed to allow synchronizing a second array with the contents of the backing array,\n * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,\n * and there are never duplicates.\n */\nclass SetArray {\n    constructor() {\n        this._indexes = { __proto__: null };\n        this.array = [];\n    }\n}\n/**\n * Typescript doesn't allow friend access to private fields, so this just casts the set into a type\n * with public access modifiers.\n */\nfunction cast(set) {\n    return set;\n}\n/**\n * Gets the index associated with `key` in the backing array, if it is already present.\n */\nfunction get(setarr, key) {\n    return cast(setarr)._indexes[key];\n}\n/**\n * Puts `key` into the backing array, if it is not already present. Returns\n * the index of the `key` in the backing array.\n */\nfunction put(setarr, key) {\n    // The key may or may not be present. If it is present, it's a number.\n    const index = get(setarr, key);\n    if (index !== undefined)\n        return index;\n    const { array, _indexes: indexes } = cast(setarr);\n    const length = array.push(key);\n    return (indexes[key] = length - 1);\n}\n/**\n * Pops the last added item out of the SetArray.\n */\nfunction pop(setarr) {\n    const { array, _indexes: indexes } = cast(setarr);\n    if (array.length === 0)\n        return;\n    const last = array.pop();\n    indexes[last] = undefined;\n}\n/**\n * Removes the key, if it exists in the set.\n */\nfunction remove(setarr, key) {\n    const index = get(setarr, key);\n    if (index === undefined)\n        return;\n    const { array, _indexes: indexes } = cast(setarr);\n    for (let i = index + 1; i < array.length; i++) {\n        const k = array[i];\n        array[i - 1] = k;\n        indexes[k]--;\n    }\n    indexes[key] = undefined;\n    array.pop();\n}\n\n\n//# sourceMappingURL=set-array.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BqcmlkZ2V3ZWxsK3NldC1hcnJheUAxLjIuMS9ub2RlX21vZHVsZXMvQGpyaWRnZXdlbGwvc2V0LWFycmF5L2Rpc3Qvc2V0LWFycmF5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwyQkFBMkI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDJCQUEyQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDJCQUEyQjtBQUN2Qyw0QkFBNEIsa0JBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUyQztBQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RvY3MvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BqcmlkZ2V3ZWxsK3NldC1hcnJheUAxLjIuMS9ub2RlX21vZHVsZXMvQGpyaWRnZXdlbGwvc2V0LWFycmF5L2Rpc3Qvc2V0LWFycmF5Lm1qcz8zOTZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2V0QXJyYXkgYWN0cyBsaWtlIGEgYFNldGAgKGFsbG93aW5nIG9ubHkgb25lIG9jY3VycmVuY2Ugb2YgYSBzdHJpbmcgYGtleWApLCBidXQgcHJvdmlkZXMgdGhlXG4gKiBpbmRleCBvZiB0aGUgYGtleWAgaW4gdGhlIGJhY2tpbmcgYXJyYXkuXG4gKlxuICogVGhpcyBpcyBkZXNpZ25lZCB0byBhbGxvdyBzeW5jaHJvbml6aW5nIGEgc2Vjb25kIGFycmF5IHdpdGggdGhlIGNvbnRlbnRzIG9mIHRoZSBiYWNraW5nIGFycmF5LFxuICogbGlrZSBob3cgaW4gYSBzb3VyY2VtYXAgYHNvdXJjZXNDb250ZW50W2ldYCBpcyB0aGUgc291cmNlIGNvbnRlbnQgYXNzb2NpYXRlZCB3aXRoIGBzb3VyY2VbaV1gLFxuICogYW5kIHRoZXJlIGFyZSBuZXZlciBkdXBsaWNhdGVzLlxuICovXG5jbGFzcyBTZXRBcnJheSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2luZGV4ZXMgPSB7IF9fcHJvdG9fXzogbnVsbCB9O1xuICAgICAgICB0aGlzLmFycmF5ID0gW107XG4gICAgfVxufVxuLyoqXG4gKiBUeXBlc2NyaXB0IGRvZXNuJ3QgYWxsb3cgZnJpZW5kIGFjY2VzcyB0byBwcml2YXRlIGZpZWxkcywgc28gdGhpcyBqdXN0IGNhc3RzIHRoZSBzZXQgaW50byBhIHR5cGVcbiAqIHdpdGggcHVibGljIGFjY2VzcyBtb2RpZmllcnMuXG4gKi9cbmZ1bmN0aW9uIGNhc3Qoc2V0KSB7XG4gICAgcmV0dXJuIHNldDtcbn1cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXNzb2NpYXRlZCB3aXRoIGBrZXlgIGluIHRoZSBiYWNraW5nIGFycmF5LCBpZiBpdCBpcyBhbHJlYWR5IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGdldChzZXRhcnIsIGtleSkge1xuICAgIHJldHVybiBjYXN0KHNldGFycikuX2luZGV4ZXNba2V5XTtcbn1cbi8qKlxuICogUHV0cyBga2V5YCBpbnRvIHRoZSBiYWNraW5nIGFycmF5LCBpZiBpdCBpcyBub3QgYWxyZWFkeSBwcmVzZW50LiBSZXR1cm5zXG4gKiB0aGUgaW5kZXggb2YgdGhlIGBrZXlgIGluIHRoZSBiYWNraW5nIGFycmF5LlxuICovXG5mdW5jdGlvbiBwdXQoc2V0YXJyLCBrZXkpIHtcbiAgICAvLyBUaGUga2V5IG1heSBvciBtYXkgbm90IGJlIHByZXNlbnQuIElmIGl0IGlzIHByZXNlbnQsIGl0J3MgYSBudW1iZXIuXG4gICAgY29uc3QgaW5kZXggPSBnZXQoc2V0YXJyLCBrZXkpO1xuICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgY29uc3QgeyBhcnJheSwgX2luZGV4ZXM6IGluZGV4ZXMgfSA9IGNhc3Qoc2V0YXJyKTtcbiAgICBjb25zdCBsZW5ndGggPSBhcnJheS5wdXNoKGtleSk7XG4gICAgcmV0dXJuIChpbmRleGVzW2tleV0gPSBsZW5ndGggLSAxKTtcbn1cbi8qKlxuICogUG9wcyB0aGUgbGFzdCBhZGRlZCBpdGVtIG91dCBvZiB0aGUgU2V0QXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHBvcChzZXRhcnIpIHtcbiAgICBjb25zdCB7IGFycmF5LCBfaW5kZXhlczogaW5kZXhlcyB9ID0gY2FzdChzZXRhcnIpO1xuICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBsYXN0ID0gYXJyYXkucG9wKCk7XG4gICAgaW5kZXhlc1tsYXN0XSA9IHVuZGVmaW5lZDtcbn1cbi8qKlxuICogUmVtb3ZlcyB0aGUga2V5LCBpZiBpdCBleGlzdHMgaW4gdGhlIHNldC5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlKHNldGFyciwga2V5KSB7XG4gICAgY29uc3QgaW5kZXggPSBnZXQoc2V0YXJyLCBrZXkpO1xuICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgeyBhcnJheSwgX2luZGV4ZXM6IGluZGV4ZXMgfSA9IGNhc3Qoc2V0YXJyKTtcbiAgICBmb3IgKGxldCBpID0gaW5kZXggKyAxOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgayA9IGFycmF5W2ldO1xuICAgICAgICBhcnJheVtpIC0gMV0gPSBrO1xuICAgICAgICBpbmRleGVzW2tdLS07XG4gICAgfVxuICAgIGluZGV4ZXNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICBhcnJheS5wb3AoKTtcbn1cblxuZXhwb3J0IHsgU2V0QXJyYXksIGdldCwgcG9wLCBwdXQsIHJlbW92ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0LWFycmF5Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.mjs\n");

/***/ })

};
;