"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@jridgewell+gen-mapping@0.3.5";
exports.ids = ["vendor-chunks/@jridgewell+gen-mapping@0.3.5"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@jridgewell+gen-mapping@0.3.5/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.mjs":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@jridgewell+gen-mapping@0.3.5/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.mjs ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenMapping: () => (/* binding */ GenMapping),\n/* harmony export */   addMapping: () => (/* binding */ addMapping),\n/* harmony export */   addSegment: () => (/* binding */ addSegment),\n/* harmony export */   allMappings: () => (/* binding */ allMappings),\n/* harmony export */   fromMap: () => (/* binding */ fromMap),\n/* harmony export */   maybeAddMapping: () => (/* binding */ maybeAddMapping),\n/* harmony export */   maybeAddSegment: () => (/* binding */ maybeAddSegment),\n/* harmony export */   setIgnore: () => (/* binding */ setIgnore),\n/* harmony export */   setSourceContent: () => (/* binding */ setSourceContent),\n/* harmony export */   toDecodedMap: () => (/* binding */ toDecodedMap),\n/* harmony export */   toEncodedMap: () => (/* binding */ toEncodedMap)\n/* harmony export */ });\n/* harmony import */ var _jridgewell_set_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jridgewell/set-array */ \"(ssr)/../node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.mjs\");\n/* harmony import */ var _jridgewell_sourcemap_codec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jridgewell/sourcemap-codec */ \"(ssr)/../node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.15/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.mjs\");\n/* harmony import */ var _jridgewell_trace_mapping__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jridgewell/trace-mapping */ \"(ssr)/../node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.mjs\");\n\n\n\n\nconst COLUMN = 0;\nconst SOURCES_INDEX = 1;\nconst SOURCE_LINE = 2;\nconst SOURCE_COLUMN = 3;\nconst NAMES_INDEX = 4;\n\nconst NO_NAME = -1;\n/**\n * Provides the state to generate a sourcemap.\n */\nclass GenMapping {\n    constructor({ file, sourceRoot } = {}) {\n        this._names = new _jridgewell_set_array__WEBPACK_IMPORTED_MODULE_0__.SetArray();\n        this._sources = new _jridgewell_set_array__WEBPACK_IMPORTED_MODULE_0__.SetArray();\n        this._sourcesContent = [];\n        this._mappings = [];\n        this.file = file;\n        this.sourceRoot = sourceRoot;\n        this._ignoreList = new _jridgewell_set_array__WEBPACK_IMPORTED_MODULE_0__.SetArray();\n    }\n}\n/**\n * Typescript doesn't allow friend access to private fields, so this just casts the map into a type\n * with public access modifiers.\n */\nfunction cast(map) {\n    return map;\n}\nfunction addSegment(map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {\n    return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);\n}\nfunction addMapping(map, mapping) {\n    return addMappingInternal(false, map, mapping);\n}\n/**\n * Same as `addSegment`, but will only add the segment if it generates useful information in the\n * resulting map. This only works correctly if segments are added **in order**, meaning you should\n * not add a segment with a lower generated line/column than one that came before.\n */\nconst maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {\n    return addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);\n};\n/**\n * Same as `addMapping`, but will only add the mapping if it generates useful information in the\n * resulting map. This only works correctly if mappings are added **in order**, meaning you should\n * not add a mapping with a lower generated line/column than one that came before.\n */\nconst maybeAddMapping = (map, mapping) => {\n    return addMappingInternal(true, map, mapping);\n};\n/**\n * Adds/removes the content of the source file to the source map.\n */\nfunction setSourceContent(map, source, content) {\n    const { _sources: sources, _sourcesContent: sourcesContent } = cast(map);\n    const index = (0,_jridgewell_set_array__WEBPACK_IMPORTED_MODULE_0__.put)(sources, source);\n    sourcesContent[index] = content;\n}\nfunction setIgnore(map, source, ignore = true) {\n    const { _sources: sources, _sourcesContent: sourcesContent, _ignoreList: ignoreList } = cast(map);\n    const index = (0,_jridgewell_set_array__WEBPACK_IMPORTED_MODULE_0__.put)(sources, source);\n    if (index === sourcesContent.length)\n        sourcesContent[index] = null;\n    if (ignore)\n        (0,_jridgewell_set_array__WEBPACK_IMPORTED_MODULE_0__.put)(ignoreList, index);\n    else\n        (0,_jridgewell_set_array__WEBPACK_IMPORTED_MODULE_0__.remove)(ignoreList, index);\n}\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nfunction toDecodedMap(map) {\n    const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, _ignoreList: ignoreList, } = cast(map);\n    removeEmptyFinalLines(mappings);\n    return {\n        version: 3,\n        file: map.file || undefined,\n        names: names.array,\n        sourceRoot: map.sourceRoot || undefined,\n        sources: sources.array,\n        sourcesContent,\n        mappings,\n        ignoreList: ignoreList.array,\n    };\n}\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nfunction toEncodedMap(map) {\n    const decoded = toDecodedMap(map);\n    return Object.assign(Object.assign({}, decoded), { mappings: (0,_jridgewell_sourcemap_codec__WEBPACK_IMPORTED_MODULE_1__.encode)(decoded.mappings) });\n}\n/**\n * Constructs a new GenMapping, using the already present mappings of the input.\n */\nfunction fromMap(input) {\n    const map = new _jridgewell_trace_mapping__WEBPACK_IMPORTED_MODULE_2__.TraceMap(input);\n    const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });\n    putAll(cast(gen)._names, map.names);\n    putAll(cast(gen)._sources, map.sources);\n    cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null);\n    cast(gen)._mappings = (0,_jridgewell_trace_mapping__WEBPACK_IMPORTED_MODULE_2__.decodedMappings)(map);\n    if (map.ignoreList)\n        putAll(cast(gen)._ignoreList, map.ignoreList);\n    return gen;\n}\n/**\n * Returns an array of high-level mapping objects for every recorded segment, which could then be\n * passed to the `source-map` library.\n */\nfunction allMappings(map) {\n    const out = [];\n    const { _mappings: mappings, _sources: sources, _names: names } = cast(map);\n    for (let i = 0; i < mappings.length; i++) {\n        const line = mappings[i];\n        for (let j = 0; j < line.length; j++) {\n            const seg = line[j];\n            const generated = { line: i + 1, column: seg[COLUMN] };\n            let source = undefined;\n            let original = undefined;\n            let name = undefined;\n            if (seg.length !== 1) {\n                source = sources.array[seg[SOURCES_INDEX]];\n                original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] };\n                if (seg.length === 5)\n                    name = names.array[seg[NAMES_INDEX]];\n            }\n            out.push({ generated, source, original, name });\n        }\n    }\n    return out;\n}\n// This split declaration is only so that terser can elminiate the static initialization block.\nfunction addSegmentInternal(skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {\n    const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, } = cast(map);\n    const line = getLine(mappings, genLine);\n    const index = getColumnIndex(line, genColumn);\n    if (!source) {\n        if (skipable && skipSourceless(line, index))\n            return;\n        return insert(line, index, [genColumn]);\n    }\n    const sourcesIndex = (0,_jridgewell_set_array__WEBPACK_IMPORTED_MODULE_0__.put)(sources, source);\n    const namesIndex = name ? (0,_jridgewell_set_array__WEBPACK_IMPORTED_MODULE_0__.put)(names, name) : NO_NAME;\n    if (sourcesIndex === sourcesContent.length)\n        sourcesContent[sourcesIndex] = content !== null && content !== void 0 ? content : null;\n    if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {\n        return;\n    }\n    return insert(line, index, name\n        ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]\n        : [genColumn, sourcesIndex, sourceLine, sourceColumn]);\n}\nfunction getLine(mappings, index) {\n    for (let i = mappings.length; i <= index; i++) {\n        mappings[i] = [];\n    }\n    return mappings[index];\n}\nfunction getColumnIndex(line, genColumn) {\n    let index = line.length;\n    for (let i = index - 1; i >= 0; index = i--) {\n        const current = line[i];\n        if (genColumn >= current[COLUMN])\n            break;\n    }\n    return index;\n}\nfunction insert(array, index, value) {\n    for (let i = array.length; i > index; i--) {\n        array[i] = array[i - 1];\n    }\n    array[index] = value;\n}\nfunction removeEmptyFinalLines(mappings) {\n    const { length } = mappings;\n    let len = length;\n    for (let i = len - 1; i >= 0; len = i, i--) {\n        if (mappings[i].length > 0)\n            break;\n    }\n    if (len < length)\n        mappings.length = len;\n}\nfunction putAll(setarr, array) {\n    for (let i = 0; i < array.length; i++)\n        (0,_jridgewell_set_array__WEBPACK_IMPORTED_MODULE_0__.put)(setarr, array[i]);\n}\nfunction skipSourceless(line, index) {\n    // The start of a line is already sourceless, so adding a sourceless segment to the beginning\n    // doesn't generate any useful information.\n    if (index === 0)\n        return true;\n    const prev = line[index - 1];\n    // If the previous segment is also sourceless, then adding another sourceless segment doesn't\n    // genrate any new information. Else, this segment will end the source/named segment and point to\n    // a sourceless position, which is useful.\n    return prev.length === 1;\n}\nfunction skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {\n    // A source/named segment at the start of a line gives position at that genColumn\n    if (index === 0)\n        return false;\n    const prev = line[index - 1];\n    // If the previous segment is sourceless, then we're transitioning to a source.\n    if (prev.length === 1)\n        return false;\n    // If the previous segment maps to the exact same source position, then this segment doesn't\n    // provide any new position information.\n    return (sourcesIndex === prev[SOURCES_INDEX] &&\n        sourceLine === prev[SOURCE_LINE] &&\n        sourceColumn === prev[SOURCE_COLUMN] &&\n        namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME));\n}\nfunction addMappingInternal(skipable, map, mapping) {\n    const { generated, source, original, name, content } = mapping;\n    if (!source) {\n        return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);\n    }\n    return addSegmentInternal(skipable, map, generated.line - 1, generated.column, source, original.line - 1, original.column, name, content);\n}\n\n\n//# sourceMappingURL=gen-mapping.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@jridgewell+gen-mapping@0.3.5/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.mjs\n");

/***/ })

};
;