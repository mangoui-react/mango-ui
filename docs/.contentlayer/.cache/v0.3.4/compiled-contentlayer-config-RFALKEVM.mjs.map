{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../src/shared/utils/rehype-code-meta.ts", "../../../src/shared/utils/rehype-demo-code-block.ts"],
  "sourcesContent": ["import { ComputedFields, defineDocumentType, makeSource } from 'contentlayer/source-files';\n\nimport { rehypeMdxCodeMeta } from './src/shared/utils/rehype-code-meta';\nimport { rehypeDemoCodeBlock } from './src/shared/utils/rehype-demo-code-block';\n\n// contentlayer \uC608\uC81C\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `**/*.md`,\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n  },\n  computedFields: {\n    url: { type: 'string', resolve: (post) => `/posts/${post._raw.flattenedPath}` },\n  },\n}));\n\n// \uCF54\uB4DC \uBB38\uC11C\uD654\nconst computedFields: ComputedFields = {\n  slug: {\n    type: 'string',\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n};\n\nconst Overview = defineDocumentType(() => ({\n  name: 'Overview',\n  filePathPattern: 'overview/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string' },\n    package: { type: 'string' },\n    description: { type: 'string' },\n    id: { type: 'string' },\n    scope: {\n      type: 'enum',\n      options: ['usage', 'theming', 'props'],\n      default: 'usage',\n    },\n    version: { type: 'string' },\n    author: { type: 'string' },\n    video: { type: 'string' },\n    category: { type: 'string' },\n    aria: { type: 'string' },\n    prevTitle: { type: 'string' },\n    prevSlug: { type: 'string' },\n    nextTitle: { type: 'string' },\n    nextSlug: { type: 'string' },\n  },\n  computedFields: {\n    ...computedFields,\n    frontMatter: {\n      type: 'json',\n      resolve: (doc) => ({\n        title: doc.title,\n        package: doc.package,\n        description: doc.description,\n        version: doc.version,\n        slug: `/${doc._raw.flattenedPath}`,\n        // editUrl: `${siteConfig.repo.editUrl}/${doc._id}`,\n        // headings: getTableOfContents(doc.body.raw),\n      }),\n    },\n  },\n}));\n\nconst Doc = defineDocumentType(() => ({\n  name: 'Doc',\n  filePathPattern: 'components/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string' },\n    package: { type: 'string' },\n    description: { type: 'string' },\n    id: { type: 'string' },\n    scope: {\n      type: 'enum',\n      options: ['usage', 'theming', 'props'],\n      default: 'usage',\n    },\n    version: { type: 'string' },\n    author: { type: 'string' },\n    video: { type: 'string' },\n    category: { type: 'string' },\n    aria: { type: 'string' },\n    prevTitle: { type: 'string' },\n    prevSlug: { type: 'string' },\n    nextTitle: { type: 'string' },\n    nextSlug: { type: 'string' },\n  },\n  computedFields: {\n    ...computedFields,\n    frontMatter: {\n      type: 'json',\n      resolve: (doc) => ({\n        title: doc.title,\n        package: doc.package,\n        description: doc.description,\n        version: doc.version,\n        slug: `/${doc._raw.flattenedPath}`,\n        // editUrl: `${siteConfig.repo.editUrl}/${doc._id}`,\n        // headings: getTableOfContents(doc.body.raw),\n      }),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Post, Overview, Doc],\n  mdx: {\n    rehypePlugins: [rehypeDemoCodeBlock, rehypeMdxCodeMeta],\n    // remarkPlugins: [remarkSlug, remarkGfm, remarkEmoji],\n  },\n});\n", "import { visit } from 'unist-util-visit';\n\nexport function rehypeMdxCodeMeta() {\n  return (tree: any) => {\n    visit(tree, 'element', (node: any) => {\n      if (node.tagName !== 'code' || !node.data) return;\n      node.properties = node.properties || {};\n      node.data.meta.split(' ').forEach((t: any) => {\n        const [key, value] = t.split('=');\n        node.properties[key] = value;\n      });\n    });\n  };\n}\n", "import { existsSync, readFileSync } from 'node:fs';\nimport { visit } from 'unist-util-visit';\n\nexport function rehypeDemoCodeBlock() {\n  return (tree: any) => {\n    visit(tree, (node) => {\n      if (node.name === 'DemoCodeBlock') {\n        const component = getAttribute(node, 'component');\n\n        if (typeof component === 'string') {\n          node.children = [];\n\n          ['index.tsx', 'styles.css'].forEach((file) => {\n            const filePath = `${process.cwd()}/src/shared/mdx/demos/${component}/${file}`;\n\n            if (!existsSync(filePath)) return;\n            const source = readFileSync(filePath, 'utf8');\n            // console.log('source ================= ', source);\n            // console.log('node ================= ', node);\n            // node.children.push({ source });\n            node.children.push({\n              type: 'mdxJsxFlowElement',\n              name: 'pre',\n              attributes: [\n                { type: 'mdxJsxAttribute', name: 'title', value: file },\n                { type: 'mdxJsxAttribute', name: 'source', value: source },\n              ],\n              data: { _mdxExplicitJsx: true },\n              children: [\n                {\n                  type: 'mdxJsxFlowElement',\n                  name: 'code',\n                  attributes: [{ type: 'mdxJsxAttribute', name: 'source', value: source }],\n                  data: { _mdxExplicitJsx: true },\n                },\n              ],\n            });\n          });\n        }\n      }\n    });\n  };\n}\n\nfunction getAttribute(node: any, name: string) {\n  return node.attributes?.find((attribute: any) => attribute.name === name)?.value;\n}\n"],
  "mappings": "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",
  "names": ["visit"]
}
