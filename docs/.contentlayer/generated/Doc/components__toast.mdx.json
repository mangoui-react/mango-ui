{
  "title": "Toast",
  "scope": "usage",
  "prevTitle": "Tabs",
  "prevSlug": "/components/tabs",
  "nextTitle": "Tooltip",
  "nextSlug": "/components/tooltip",
  "body": {
    "raw": "\n# Toast\n\n<Description>The Toast component offers feedback to the user following an action.</Description>\n\n<DemoContainer>\n  <ToastDemo />\n  <DemoCodeBlock component=\"toast\" />\n</DemoContainer>\n\n## Installation\n\n<PackageManagers\n  command={{\n    npm: 'npm i @melio-ui/toast',\n    yarn: 'yarn add @melio-ui/toast',\n    pnpm: 'pnpm add @melio-ui/toast',\n    bun: 'bun add @melio-ui/toast',\n  }}\n/>\n\n## Import\n\n<ImportSyntax\n  command={{\n    individual: `import { \n  ToastRoot,\n  ToastContent,\n  ToastViewport,\n  ToastClose,\n} from '@melio-ui/toast';`,\n    global: `import { \n  ToastRoot,\n  ToastContent,\n  ToastViewport,\n  ToastClose,\n} from '@melio-ui/react';`,\n  }}\n/>\n\n- **ToastRoot**: All parts of the toast are included.\n- **ToastContent**: The toast content.\n- **ToastViewport**: This is the fixed area where the toast notification appears.\n- **ToastClose**: A button for dismissing the toast message early.\n\n### Another way to import\n\n```js\n'use client';\n\nimport { Toast } from '@melio-ui/toast';\n\n<Toast.Root>\n  <Toast.Content>\n    Notification\n    <Toast.Close asChild>\n      <button type=\"button\">Close</button>\n    </Toast.Close>\n  </Toast.Content>\n  <Toast.Viewport />\n</Toast.Root>;\n```\n\n> 'use client' must be used when rendering on the server side.\n\n## API Reference\n\n### ToastRoot\n\nAll parts of the toast are included.\n\n<PropsTable\n  data={[\n    {\n      name: 'open',\n      required: false,\n      type: 'boolean',\n      description: 'Sets whether the toast content is open or closed.',\n    },\n    {\n      name: 'defaultOpen',\n      required: false,\n      type: 'boolean',\n      description:\n        'When first rendered, the toast content is in an opened state. Use when there is no need to control the opened state.',\n    },\n    {\n      name: 'duration',\n      required: false,\n      default: '5000',\n      type: 'number',\n      description:\n        \"The duration in milliseconds for the toast to auto-close, which overrides the provider's setting.\",\n    },\n    {\n      name: 'onOpenChange',\n      required: false,\n      type: '(open: boolean) => void',\n      description:\n        'This is an event handler that is triggered when the open state of the toast content changes.',\n    },\n  ]}\n/>\n\n### ToastContent\n\nThe toast content.\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-state]',\n      values: '\"open\" | \"closed\"',\n    },\n  ]}\n/>\n\n### ToastViewport\n\nThis is the fixed area where the toast notification appears.\n\n<PropsTable\n  data={[\n    {\n      name: 'placement',\n      required: false,\n      default: '\"top\"',\n      type: (\n        <>\n          TypeAttributes.Placement\n          <br />\n          <br />\n          \"top\" | \"top-left\" | \"top-right\" | \"bottom\" | \"bottom-left\" | \"bottom-right\"\n        </>\n      ),\n      description: 'Specifies the location of the value.',\n    },\n  ]}\n/>\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-placement]',\n      values: '\"top\" | \"top-left\" | \"top-right\" | \"bottom\" | \"bottom-left\" | \"bottom-right\"',\n    },\n  ]}\n/>\n\n### ToastClose\n\nA button for dismissing the toast message early.\n\n<PropsTable\n  data={[\n    {\n      name: 'asChild',\n      required: false,\n      type: 'boolean',\n      description:\n        'Changes the default rendering element passed as a child, merging its props and behavior.',\n    },\n  ]}\n/>\n\n## Examples\n\n### Placement Settings\n\n```jsx render=true\nfunction PlacementToast() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        Open Toast\n      </button>\n\n      <ToastRoot open={open} onOpenChange={setOpen}>\n        <ToastContent>\n          <div style={{ backgroundColor: '#dffadc', height: 50, padding: 15, color: 'black' }}>\n            Notification\n          </div>\n        </ToastContent>\n        <ToastViewport placement=\"bottom-right\" />\n      </ToastRoot>\n    </>\n  );\n}\n\nrender(<PlacementToast />);\n```\n\n### Duration Settings\n\n```jsx render=true\nfunction DurationToast() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        Open Toast\n      </button>\n\n      <ToastRoot duration={1000} open={open} onOpenChange={setOpen}>\n        <ToastContent>\n          <div style={{ backgroundColor: '#dffadc', height: 50, padding: 15, color: 'black' }}>\n            Notification\n          </div>\n        </ToastContent>\n        <ToastViewport />\n      </ToastRoot>\n    </>\n  );\n}\n\nrender(<DurationToast />);\n```\n\n### Close through user action.\n\n```jsx render=true\nfunction CloseToast() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        Open Toast\n      </button>\n\n      <ToastRoot open={open} onOpenChange={setOpen}>\n        <ToastContent\n          style={{\n            display: 'grid',\n            gridTemplateAreas: `\"title action\" \"description action\"`,\n            gridTemplateColumns: 'auto max-content',\n            columnGap: 15,\n            alignItems: 'center',\n            backgroundColor: '#dffadc',\n            color: 'black',\n          }}\n        >\n          <div\n            style={{\n              gridArea: 'title',\n              height: 50,\n              padding: 15,\n            }}\n          >\n            Notification\n          </div>\n          <ToastClose style={{ gridArea: 'action', padding: 15 }} asChild>\n            <button type=\"button\">Undo</button>\n          </ToastClose>\n        </ToastContent>\n        <ToastViewport />\n      </ToastRoot>\n    </>\n  );\n}\n\nrender(<CloseToast />);\n```\n",
    "code": "var Component=(()=>{var b=Object.create;var l=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var C=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var v=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),x=(e,n)=>{for(var o in n)l(e,o,{get:n[o],enumerable:!0})},h=(e,n,o,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let a of C(n))!y.call(e,a)&&a!==o&&l(e,a,{get:()=>n[a],enumerable:!(s=T(n,a))||s.enumerable});return e};var O=(e,n,o)=>(o=e!=null?b(w(e)):{},h(n||!e||!e.__esModule?l(o,\"default\",{value:e,enumerable:!0}):o,e)),k=e=>h(l({},\"__esModule\",{value:!0}),e);var f=v((A,u)=>{u.exports=_jsx_runtime});var S={};x(S,{default:()=>N,frontmatter:()=>R});var t=O(f()),R={title:\"Toast\",prevTitle:\"Tabs\",prevSlug:\"/components/tabs\",nextTitle:\"Tooltip\",nextSlug:\"/components/tooltip\"};function g(e){let n=Object.assign({h1:\"h1\",h2:\"h2\",ul:\"ul\",li:\"li\",strong:\"strong\",h3:\"h3\",pre:\"pre\",code:\"code\",blockquote:\"blockquote\",p:\"p\",br:\"br\"},e.components),{Description:o,DemoContainer:s,ToastDemo:a,DemoCodeBlock:c,PackageManagers:p,ImportSyntax:m,PropsTable:i,DataAttributesTable:d}=n;return d||r(\"DataAttributesTable\",!0),c||r(\"DemoCodeBlock\",!0),s||r(\"DemoContainer\",!0),o||r(\"Description\",!0),m||r(\"ImportSyntax\",!0),p||r(\"PackageManagers\",!0),i||r(\"PropsTable\",!0),a||r(\"ToastDemo\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{children:\"Toast\"}),`\n`,(0,t.jsx)(o,{children:\"The Toast component offers feedback to the user following an action.\"}),`\n`,(0,t.jsxs)(s,{children:[(0,t.jsx)(a,{}),(0,t.jsxs)(c,{component:\"toast\",children:[(0,t.jsx)(\"pre\",{title:\"index.tsx\",source:`'use client';\n\nimport React from 'react';\n\nimport { ToastClose, ToastContent, ToastRoot, ToastViewport } from '@melio-ui/toast';\n\nimport './styles.css';\n\nexport default function ToastDemo() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"toast-trigger\"\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        Open Toast\n      </button>\n\n      <ToastRoot open={open} onOpenChange={setOpen}>\n        <ToastContent className=\"toast-content\">\n          <div style={{ backgroundColor: '#dffadc', height: 50, padding: 15, color: 'black' }}>\n            Notification\n          </div>\n        </ToastContent>\n        <ToastViewport className=\"toast-viewport\" />\n      </ToastRoot>\n    </>\n  );\n}\n`,children:(0,t.jsx)(\"code\",{source:`'use client';\n\nimport React from 'react';\n\nimport { ToastClose, ToastContent, ToastRoot, ToastViewport } from '@melio-ui/toast';\n\nimport './styles.css';\n\nexport default function ToastDemo() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"toast-trigger\"\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        Open Toast\n      </button>\n\n      <ToastRoot open={open} onOpenChange={setOpen}>\n        <ToastContent className=\"toast-content\">\n          <div style={{ backgroundColor: '#dffadc', height: 50, padding: 15, color: 'black' }}>\n            Notification\n          </div>\n        </ToastContent>\n        <ToastViewport className=\"toast-viewport\" />\n      </ToastRoot>\n    </>\n  );\n}\n`})}),(0,t.jsx)(\"pre\",{title:\"styles.css\",source:`.toast-trigger {\n  border: 0.0625rem solid rgba(255, 255, 255, 0.35);\n  border-radius: 0.25rem;\n  padding: 0.3125rem;\n  color: #e2e8f0;\n}\n\n.toast-content {\n  border-radius: 0.375rem;\n  min-width: 18rem;\n  box-shadow:\n    hsl(206 22% 7% / 35%) 0rem 0.625rem 2.375rem -0.625rem,\n    hsl(206 22% 7% / 20%) 0rem 0.625rem 1.25rem -0.9375rem;\n  border: 0.0625rem solid #dedede;\n}\n.toast-content[data-state='open'] {\n  animation: slideIn 150ms cubic-bezier(0.16, 1, 0.3, 1);\n}\n.toast-content[data-state='closed'] {\n  animation: hide 100ms ease-in;\n}\n\n.toast-viewport {\n  position: fixed;\n  z-index: 1300;\n}\n.toast-viewport[data-placement='top'] {\n  top: 0.625rem;\n  left: 50%;\n  right: auto;\n  transform: translateX(-50%);\n}\n.toast-viewport[data-placement='top-left'] {\n  top: 0.625rem;\n  left: 0.625rem;\n  right: auto;\n}\n.toast-viewport[data-placement='top-right'] {\n  top: 0.625rem;\n  left: auto;\n  right: 0.625rem;\n}\n.toast-viewport[data-placement='bottom'] {\n  left: 50%;\n  right: auto;\n  bottom: 0.625rem;\n  transform: translateX(-50%);\n}\n.toast-viewport[data-placement='bottom-left'] {\n  left: 0.625rem;\n  right: auto;\n  bottom: 0.625rem;\n}\n.toast-viewport[data-placement='bottom-right'] {\n  left: auto;\n  right: 0.625rem;\n  bottom: 0.625rem;\n}\n\n@keyframes slideIn {\n  from {\n    transform: 'translateX(calc(100% + 25px))';\n  }\n  to {\n    transform: 'translateX(0)';\n  }\n}\n\n@keyframes hide {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n`,children:(0,t.jsx)(\"code\",{source:`.toast-trigger {\n  border: 0.0625rem solid rgba(255, 255, 255, 0.35);\n  border-radius: 0.25rem;\n  padding: 0.3125rem;\n  color: #e2e8f0;\n}\n\n.toast-content {\n  border-radius: 0.375rem;\n  min-width: 18rem;\n  box-shadow:\n    hsl(206 22% 7% / 35%) 0rem 0.625rem 2.375rem -0.625rem,\n    hsl(206 22% 7% / 20%) 0rem 0.625rem 1.25rem -0.9375rem;\n  border: 0.0625rem solid #dedede;\n}\n.toast-content[data-state='open'] {\n  animation: slideIn 150ms cubic-bezier(0.16, 1, 0.3, 1);\n}\n.toast-content[data-state='closed'] {\n  animation: hide 100ms ease-in;\n}\n\n.toast-viewport {\n  position: fixed;\n  z-index: 1300;\n}\n.toast-viewport[data-placement='top'] {\n  top: 0.625rem;\n  left: 50%;\n  right: auto;\n  transform: translateX(-50%);\n}\n.toast-viewport[data-placement='top-left'] {\n  top: 0.625rem;\n  left: 0.625rem;\n  right: auto;\n}\n.toast-viewport[data-placement='top-right'] {\n  top: 0.625rem;\n  left: auto;\n  right: 0.625rem;\n}\n.toast-viewport[data-placement='bottom'] {\n  left: 50%;\n  right: auto;\n  bottom: 0.625rem;\n  transform: translateX(-50%);\n}\n.toast-viewport[data-placement='bottom-left'] {\n  left: 0.625rem;\n  right: auto;\n  bottom: 0.625rem;\n}\n.toast-viewport[data-placement='bottom-right'] {\n  left: auto;\n  right: 0.625rem;\n  bottom: 0.625rem;\n}\n\n@keyframes slideIn {\n  from {\n    transform: 'translateX(calc(100% + 25px))';\n  }\n  to {\n    transform: 'translateX(0)';\n  }\n}\n\n@keyframes hide {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n`})})]})]}),`\n`,(0,t.jsx)(n.h2,{children:\"Installation\"}),`\n`,(0,t.jsx)(p,{command:{npm:\"npm i @melio-ui/toast\",yarn:\"yarn add @melio-ui/toast\",pnpm:\"pnpm add @melio-ui/toast\",bun:\"bun add @melio-ui/toast\"}}),`\n`,(0,t.jsx)(n.h2,{children:\"Import\"}),`\n`,(0,t.jsx)(m,{command:{individual:`import { \n  ToastRoot,\n  ToastContent,\n  ToastViewport,\n  ToastClose,\n} from '@melio-ui/toast';`,global:`import { \n  ToastRoot,\n  ToastContent,\n  ToastViewport,\n  ToastClose,\n} from '@melio-ui/react';`}}),`\n`,(0,t.jsxs)(n.ul,{children:[`\n`,(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:\"ToastRoot\"}),\": All parts of the toast are included.\"]}),`\n`,(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:\"ToastContent\"}),\": The toast content.\"]}),`\n`,(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:\"ToastViewport\"}),\": This is the fixed area where the toast notification appears.\"]}),`\n`,(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:\"ToastClose\"}),\": A button for dismissing the toast message early.\"]}),`\n`]}),`\n`,(0,t.jsx)(n.h3,{children:\"Another way to import\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-js\",children:`'use client';\n\nimport { Toast } from '@melio-ui/toast';\n\n<Toast.Root>\n  <Toast.Content>\n    Notification\n    <Toast.Close asChild>\n      <button type=\"button\">Close</button>\n    </Toast.Close>\n  </Toast.Content>\n  <Toast.Viewport />\n</Toast.Root>;\n`})}),`\n`,(0,t.jsxs)(n.blockquote,{children:[`\n`,(0,t.jsx)(n.p,{children:\"'use client' must be used when rendering on the server side.\"}),`\n`]}),`\n`,(0,t.jsx)(n.h2,{children:\"API Reference\"}),`\n`,(0,t.jsx)(n.h3,{children:\"ToastRoot\"}),`\n`,(0,t.jsx)(n.p,{children:\"All parts of the toast are included.\"}),`\n`,(0,t.jsx)(i,{data:[{name:\"open\",required:!1,type:\"boolean\",description:\"Sets whether the toast content is open or closed.\"},{name:\"defaultOpen\",required:!1,type:\"boolean\",description:\"When first rendered, the toast content is in an opened state. Use when there is no need to control the opened state.\"},{name:\"duration\",required:!1,default:\"5000\",type:\"number\",description:\"The duration in milliseconds for the toast to auto-close, which overrides the provider's setting.\"},{name:\"onOpenChange\",required:!1,type:\"(open: boolean) => void\",description:\"This is an event handler that is triggered when the open state of the toast content changes.\"}]}),`\n`,(0,t.jsx)(n.h3,{children:\"ToastContent\"}),`\n`,(0,t.jsx)(n.p,{children:\"The toast content.\"}),`\n`,(0,t.jsx)(d,{data:[{attribute:\"[data-state]\",values:'\"open\" | \"closed\"'}]}),`\n`,(0,t.jsx)(n.h3,{children:\"ToastViewport\"}),`\n`,(0,t.jsx)(n.p,{children:\"This is the fixed area where the toast notification appears.\"}),`\n`,(0,t.jsx)(i,{data:[{name:\"placement\",required:!1,default:'\"top\"',type:(0,t.jsxs)(t.Fragment,{children:[\"TypeAttributes.Placement\",(0,t.jsx)(n.br,{}),(0,t.jsx)(n.br,{}),'\"top\" | \"top-left\" | \"top-right\" | \"bottom\" | \"bottom-left\" | \"bottom-right\"']}),description:\"Specifies the location of the value.\"}]}),`\n`,(0,t.jsx)(d,{data:[{attribute:\"[data-placement]\",values:'\"top\" | \"top-left\" | \"top-right\" | \"bottom\" | \"bottom-left\" | \"bottom-right\"'}]}),`\n`,(0,t.jsx)(n.h3,{children:\"ToastClose\"}),`\n`,(0,t.jsx)(n.p,{children:\"A button for dismissing the toast message early.\"}),`\n`,(0,t.jsx)(i,{data:[{name:\"asChild\",required:!1,type:\"boolean\",description:\"Changes the default rendering element passed as a child, merging its props and behavior.\"}]}),`\n`,(0,t.jsx)(n.h2,{children:\"Examples\"}),`\n`,(0,t.jsx)(n.h3,{children:\"Placement Settings\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-jsx\",render:\"true\",children:`function PlacementToast() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        Open Toast\n      </button>\n\n      <ToastRoot open={open} onOpenChange={setOpen}>\n        <ToastContent>\n          <div style={{ backgroundColor: '#dffadc', height: 50, padding: 15, color: 'black' }}>\n            Notification\n          </div>\n        </ToastContent>\n        <ToastViewport placement=\"bottom-right\" />\n      </ToastRoot>\n    </>\n  );\n}\n\nrender(<PlacementToast />);\n`})}),`\n`,(0,t.jsx)(n.h3,{children:\"Duration Settings\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-jsx\",render:\"true\",children:`function DurationToast() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        Open Toast\n      </button>\n\n      <ToastRoot duration={1000} open={open} onOpenChange={setOpen}>\n        <ToastContent>\n          <div style={{ backgroundColor: '#dffadc', height: 50, padding: 15, color: 'black' }}>\n            Notification\n          </div>\n        </ToastContent>\n        <ToastViewport />\n      </ToastRoot>\n    </>\n  );\n}\n\nrender(<DurationToast />);\n`})}),`\n`,(0,t.jsx)(n.h3,{children:\"Close through user action.\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-jsx\",render:\"true\",children:`function CloseToast() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        Open Toast\n      </button>\n\n      <ToastRoot open={open} onOpenChange={setOpen}>\n        <ToastContent\n          style={{\n            display: 'grid',\n            gridTemplateAreas: \\`\"title action\" \"description action\"\\`,\n            gridTemplateColumns: 'auto max-content',\n            columnGap: 15,\n            alignItems: 'center',\n            backgroundColor: '#dffadc',\n            color: 'black',\n          }}\n        >\n          <div\n            style={{\n              gridArea: 'title',\n              height: 50,\n              padding: 15,\n            }}\n          >\n            Notification\n          </div>\n          <ToastClose style={{ gridArea: 'action', padding: 15 }} asChild>\n            <button type=\"button\">Undo</button>\n          </ToastClose>\n        </ToastContent>\n        <ToastViewport />\n      </ToastRoot>\n    </>\n  );\n}\n\nrender(<CloseToast />);\n`})})]})}function D(e={}){let{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(g,e)})):g(e)}var N=D;function r(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return k(S);})();\n;return Component;"
  },
  "_id": "components/toast.mdx",
  "_raw": {
    "sourceFilePath": "components/toast.mdx",
    "sourceFileName": "toast.mdx",
    "sourceFileDir": "components",
    "contentType": "mdx",
    "flattenedPath": "components/toast"
  },
  "type": "Doc",
  "slug": "/components/toast",
  "frontMatter": {
    "title": "Toast",
    "slug": "/components/toast"
  }
}