{
  "title": "Steps",
  "scope": "usage",
  "prevTitle": "Slider",
  "prevSlug": "/components/slider",
  "nextTitle": "Switch",
  "nextSlug": "/components/switch",
  "body": {
    "raw": "\n# Steps\n\n<Description>\n  Steps communicate progress through numbered steps, providing a wizard-like workflow.\n</Description>\n\n<DemoContainer>\n  <StepsDemo />\n  <DemoCodeBlock component=\"steps\" />\n</DemoContainer>\n\n## Installation\n\n<PackageManagers\n  command={{\n    npm: 'npm i @melio-ui/steps',\n    yarn: 'yarn add @melio-ui/steps',\n    pnpm: 'pnpm add @melio-ui/steps',\n    bun: 'bun add @melio-ui/steps',\n  }}\n/>\n\n## Import\n\n<ImportSyntax\n  command={{\n    individual: `import { \n  StepsRoot,\n  StepsStep,\n  StepsIndicator,\n  StepsStatus,\n  StepsContent,\n  StepsSeparator,\n} from '@melio-ui/steps';`,\n    global: `import { \n  StepsRoot,\n  StepsStep,\n  StepsIndicator,\n  StepsStatus,\n  StepsContent,\n  StepsSeparator,\n} from '@melio-ui/react';`,\n  }}\n/>\n\n- **StepsRoot**: All parts of the steps are included.\n- **StepsStep**: A single step in the sequence.\n- **StepsIndicator**: A component displaying markers that update as the user advances through steps, clearly tracking progress.\n- **StepsStatus**: Indicates the status of the step.\n- **StepsContent**: Additional content for a step.\n- **StepsSeparator**: Divider between steps.\n\n### Another way to import\n\n```js\n'use client';\n\nimport { Steps } from '@melio-ui/steps';\n\n<Steps.Root currentStep={1}>\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step01</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step02</div>\n      <div>This is a description</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n</Steps.Root>;\n```\n\n> 'use client' must be used when rendering on the server side.\n\n## API Reference\n\n### StepsRoot\n\nAll parts of the steps are included.\n\n<PropsTable\n  data={[\n    {\n      name: 'currentStep',\n      required: false,\n      type: 'number',\n      description: 'Index of the current step.',\n    },\n    {\n      name: 'orientation',\n      required: false,\n      type: (\n        <>\n          TypeAttributes.Orientation\n          <br />\n          <br />\n          \"horizontal\" | \"vertical\"\n        </>\n      ),\n      description: 'Direction for the placement of the Steps component.',\n    },\n  ]}\n/>\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-orientation]',\n      values: '\"horizontal\" | \"vertical\"',\n    },\n  ]}\n/>\n\n### StepsStep\n\nA single step in the sequence.\n\n<PropsTable\n  data={[\n    {\n      name: 'status',\n      required: false,\n      type: (\n        <>\n          StepStatusValue\n          <br />\n          <br />\n          \"finish\" | \"wait\" | \"process\" | \"error\"\n        </>\n      ),\n      description: 'Sets the state of the step.',\n    },\n  ]}\n/>\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-status]',\n      values: '\"finish\" | \"wait\" | \"process\" | \"error\"',\n    },\n    {\n      attribute: '[data-orientation]',\n      values: '\"horizontal\" | \"vertical\"',\n    },\n  ]}\n/>\n\n### StepsIndicator\n\nA component displaying markers that update as the user advances through steps, clearly tracking progress.\n\n<PropsTable\n  data={[\n    {\n      name: 'children',\n      required: true,\n      type: 'React.ReactNode | (status: StepStatusValue) => React.ReactNode',\n      description: 'An element that renders the state of a step.',\n    },\n  ]}\n/>\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-status]',\n      values: '\"finish\" | \"wait\" | \"process\" | \"error\"',\n    },\n    {\n      attribute: '[data-orientation]',\n      values: '\"horizontal\" | \"vertical\"',\n    },\n  ]}\n/>\n\n### StepsStatus\n\nIndicates the status of the step.\n\n<PropsTable\n  data={[\n    {\n      name: 'finish',\n      required: false,\n      type: 'React.ReactNode',\n      description: 'Element indicating completion status.',\n    },\n    {\n      name: 'wait',\n      required: false,\n      type: 'React.ReactNode',\n      description: 'Element indicating waiting state.',\n    },\n    {\n      name: 'process',\n      required: false,\n      type: 'React.ReactNode',\n      description: 'Element that indicates the state of the process.',\n    },\n    {\n      name: 'error',\n      required: false,\n      type: 'React.ReactNode',\n      description: 'Element indicating error state.',\n    },\n  ]}\n/>\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-status]',\n      values: '\"finish\" | \"wait\" | \"process\" | \"error\"',\n    },\n    {\n      attribute: '[data-orientation]',\n      values: '\"horizontal\" | \"vertical\"',\n    },\n  ]}\n/>\n\n### StepsContent\n\nAdditional content for a step.\n\n<PropsTable\n  data={[\n    {\n      name: 'children',\n      required: true,\n      type: 'React.ReactNode | (status: StepStatusValue) => React.ReactNode',\n      description: 'An element that renders the content of a step.',\n    },\n  ]}\n/>\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-status]',\n      values: '\"finish\" | \"wait\" | \"process\" | \"error\"',\n    },\n    {\n      attribute: '[data-orientation]',\n      values: '\"horizontal\" | \"vertical\"',\n    },\n  ]}\n/>\n\n### StepsSeparator\n\nDivider between steps.\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-orientation]',\n      values: '\"horizontal\" | \"vertical\"',\n    },\n  ]}\n/>\n\n## Examples\n\n### Set status on step\n\n```jsx\n<Steps.Root currentStep={0}>\n  <Steps.Step status=\"error\">\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step01</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step02</div>\n      <div>This is a description</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step03</div>\n    </Steps.Content>\n  </Steps.Step>\n</Steps.Root>\n```\n\n### Custom status via props.\n\n```jsx render=true\nfunction CustomStatusProps() {\n  return (\n    <Steps.Root currentStep={1}>\n      <Steps.Step status=\"error\">\n        <Steps.Indicator>\n          <Steps.Status finish={<UserIcon />} error={<UserIcon color=\"red\" />} />\n        </Steps.Indicator>\n        <Steps.Content>\n          <div>Step01</div>\n        </Steps.Content>\n        <Steps.Separator />\n      </Steps.Step>\n\n      <Steps.Step>\n        <Steps.Indicator>\n          <Steps.Status finish={<UserIcon />} error={<UserIcon color=\"red\" />} />\n        </Steps.Indicator>\n        <Steps.Content>\n          <div>Step02</div>\n          <div>This is a description</div>\n        </Steps.Content>\n        <Steps.Separator />\n      </Steps.Step>\n\n      <Steps.Step>\n        <Steps.Indicator>\n          <Steps.Status wait={<UserIcon color=\"gray\" />} />\n        </Steps.Indicator>\n        <Steps.Content>\n          <div>Step03</div>\n        </Steps.Content>\n      </Steps.Step>\n    </Steps.Root>\n  );\n}\n\nrender(<CustomStatusProps />);\n\nfunction UserIcon() {\n  return (\n    <svg\n      width=\"2em\"\n      height=\"2em\"\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\" />\n    </svg>\n  );\n}\n```\n\n### Custom status via function.\n\n```jsx render=true\nfunction CustomStatusFunc() {\n  return (\n    <Steps.Root currentStep={1}>\n      <Steps.Step status=\"wait\">\n        <Steps.Indicator>\n        {(status: StepStatusValue) =>\n          status === 'wait' ? <UserIcon color=\"gray\" /> : <UserIcon />\n        }\n        </Steps.Indicator>\n        <Steps.Content>\n          <div>Step01</div>\n        </Steps.Content>\n        <Steps.Separator />\n      </Steps.Step>\n\n      <Steps.Step>\n        <Steps.Indicator>\n          <Steps.Status />\n        </Steps.Indicator>\n        <Steps.Content>\n          <div>Step02</div>\n          <div>This is a description</div>\n        </Steps.Content>\n        <Steps.Separator />\n      </Steps.Step>\n\n      <Steps.Step>\n        <Steps.Indicator>\n          <Steps.Status />\n        </Steps.Indicator>\n        <Steps.Content>\n          <div>Step03</div>\n        </Steps.Content>\n      </Steps.Step>\n    </Steps.Root>\n  );\n}\n\nrender(<CustomStatusFunc />);\n\nfunction UserIcon() {\n  return (\n    <svg\n      width=\"2em\"\n      height=\"2em\"\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\" />\n    </svg>\n  );\n}\n```\n\n### Custom content via function.\n\n```jsx\n<Steps.Root currentStep={1}>\n  <Steps.Step status=\"finish\">\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      {(status: StepStatusValue) =>\n        status === 'finish' ? (\n          <div>Step01 - {status}</div>\n        ) : (\n          <>\n            <div>Step01 - {status}</div>\n            <div>This is a description</div>\n          </>\n        )\n      }\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step02</div>\n      <div>This is a description</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step03</div>\n    </Steps.Content>\n  </Steps.Step>\n</Steps.Root>\n```\n\n### Custom content via function.\n\n```jsx\n<Steps.Root orientation=\"vertical\" currentStep={0}>\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step01</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step02</div>\n      <div>This is a description</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step03</div>\n    </Steps.Content>\n  </Steps.Step>\n</Steps.Root>\n```\n",
    "code": "var Component=(()=>{var f=Object.create;var d=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var x=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=>{for(var s in e)d(n,s,{get:e[s],enumerable:!0})},u=(n,e,s,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of b(e))!I.call(n,r)&&r!==s&&d(n,r,{get:()=>e[r],enumerable:!(i=g(e,r))||i.enumerable});return n};var N=(n,e,s)=>(s=n!=null?f(C(n)):{},u(e||!n||!n.__esModule?d(s,\"default\",{value:n,enumerable:!0}):s,n)),y=n=>u(d({},\"__esModule\",{value:!0}),n);var m=x((A,h)=>{h.exports=_jsx_runtime});var D={};w(D,{default:()=>j,frontmatter:()=>R});var t=N(m()),R={title:\"Steps\",prevTitle:\"Slider\",prevSlug:\"/components/slider\",nextTitle:\"Switch\",nextSlug:\"/components/switch\"};function v(n){let e=Object.assign({h1:\"h1\",p:\"p\",h2:\"h2\",ul:\"ul\",li:\"li\",strong:\"strong\",h3:\"h3\",pre:\"pre\",code:\"code\",blockquote:\"blockquote\",br:\"br\"},n.components),{Description:s,DemoContainer:i,StepsDemo:r,DemoCodeBlock:c,PackageManagers:S,ImportSyntax:l,PropsTable:p,DataAttributesTable:a}=e;return a||o(\"DataAttributesTable\",!0),c||o(\"DemoCodeBlock\",!0),i||o(\"DemoContainer\",!0),s||o(\"Description\",!0),l||o(\"ImportSyntax\",!0),S||o(\"PackageManagers\",!0),p||o(\"PropsTable\",!0),r||o(\"StepsDemo\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{children:\"Steps\"}),`\n`,(0,t.jsx)(s,{children:(0,t.jsx)(e.p,{children:\"Steps communicate progress through numbered steps, providing a wizard-like workflow.\"})}),`\n`,(0,t.jsxs)(i,{children:[(0,t.jsx)(r,{}),(0,t.jsxs)(c,{component:\"steps\",children:[(0,t.jsx)(\"pre\",{title:\"index.tsx\",source:`'use client';\n\nimport React from 'react';\n\nimport {\n  StepsContent,\n  StepsIndicator,\n  StepsRoot,\n  StepsSeparator,\n  StepsStatus,\n  StepsStep,\n} from '@melio-ui/steps';\n\nimport './styles.css';\n\nexport default function StepsDemo() {\n  const [currentStep, setCurrentStep] = React.useState(1);\n\n  const handlePrev = () => {\n    setCurrentStep((prev) => {\n      let step = prev - 1;\n      if (step < 0) {\n        step = 0;\n      }\n      return step;\n    });\n  };\n\n  const handleNext = () => {\n    setCurrentStep((prev) => {\n      let step = prev + 1;\n      if (step > 2) {\n        step = 2;\n      }\n      return step;\n    });\n  };\n\n  return (\n    <div className=\"steps-container\">\n      <StepsRoot className=\"stpes-root\" currentStep={currentStep}>\n        <StepsStep className=\"steps-step\">\n          <StepsIndicator className=\"steps-indicator\">\n            <StepsStatus />\n          </StepsIndicator>\n          <StepsContent className=\"steps-content\">\n            <div>Step01</div>\n          </StepsContent>\n          <StepsSeparator className=\"steps-separator\" />\n        </StepsStep>\n\n        <StepsStep className=\"steps-step\">\n          <StepsIndicator className=\"steps-indicator\">\n            <StepsStatus />\n          </StepsIndicator>\n          <StepsContent className=\"steps-content\">\n            <div>Step02</div>\n            <div>This is a description</div>\n          </StepsContent>\n          <StepsSeparator className=\"steps-separator\" />\n        </StepsStep>\n\n        <StepsStep className=\"steps-step\">\n          <StepsIndicator className=\"steps-indicator\">\n            <StepsStatus />\n          </StepsIndicator>\n          <StepsContent className=\"steps-content\">\n            <div>Step03</div>\n          </StepsContent>\n        </StepsStep>\n      </StepsRoot>\n\n      <div className=\"steps-move\">\n        <button onClick={handlePrev}>Prev</button>\n        <button onClick={handleNext}>Next</button>\n      </div>\n    </div>\n  );\n}\n`,children:(0,t.jsx)(\"code\",{source:`'use client';\n\nimport React from 'react';\n\nimport {\n  StepsContent,\n  StepsIndicator,\n  StepsRoot,\n  StepsSeparator,\n  StepsStatus,\n  StepsStep,\n} from '@melio-ui/steps';\n\nimport './styles.css';\n\nexport default function StepsDemo() {\n  const [currentStep, setCurrentStep] = React.useState(1);\n\n  const handlePrev = () => {\n    setCurrentStep((prev) => {\n      let step = prev - 1;\n      if (step < 0) {\n        step = 0;\n      }\n      return step;\n    });\n  };\n\n  const handleNext = () => {\n    setCurrentStep((prev) => {\n      let step = prev + 1;\n      if (step > 2) {\n        step = 2;\n      }\n      return step;\n    });\n  };\n\n  return (\n    <div className=\"steps-container\">\n      <StepsRoot className=\"stpes-root\" currentStep={currentStep}>\n        <StepsStep className=\"steps-step\">\n          <StepsIndicator className=\"steps-indicator\">\n            <StepsStatus />\n          </StepsIndicator>\n          <StepsContent className=\"steps-content\">\n            <div>Step01</div>\n          </StepsContent>\n          <StepsSeparator className=\"steps-separator\" />\n        </StepsStep>\n\n        <StepsStep className=\"steps-step\">\n          <StepsIndicator className=\"steps-indicator\">\n            <StepsStatus />\n          </StepsIndicator>\n          <StepsContent className=\"steps-content\">\n            <div>Step02</div>\n            <div>This is a description</div>\n          </StepsContent>\n          <StepsSeparator className=\"steps-separator\" />\n        </StepsStep>\n\n        <StepsStep className=\"steps-step\">\n          <StepsIndicator className=\"steps-indicator\">\n            <StepsStatus />\n          </StepsIndicator>\n          <StepsContent className=\"steps-content\">\n            <div>Step03</div>\n          </StepsContent>\n        </StepsStep>\n      </StepsRoot>\n\n      <div className=\"steps-move\">\n        <button onClick={handlePrev}>Prev</button>\n        <button onClick={handleNext}>Next</button>\n      </div>\n    </div>\n  );\n}\n`})}),(0,t.jsx)(\"pre\",{title:\"styles.css\",source:`.steps-container {\n  width: 100%;\n  padding-left: 3.125rem;\n  padding-right: 3.125rem;\n}\n\n.steps-move {\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.3125rem;\n  margin-top: 1.25rem;\n  color: #e2e8f0;\n}\n.steps-move button {\n  border: 0.0313rem solid;\n  border-radius: 0.3125rem;\n  border-color: rgba(194, 215, 175, 0.464);\n  padding: 0.3125rem 0.625rem;\n}\n.steps-move button:hover {\n  background-color: rgb(104, 106, 234);\n}\n\n.stpes-root {\n  display: flex;\n}\n.stpes-root[data-orientation='vertical'] {\n  flex-direction: column;\n}\n\n.steps-step {\n  padding: 0;\n  margin: 0;\n  align-items: center;\n  position: relative;\n  flex: 1;\n  display: flex;\n  overflow: hidden;\n}\n.steps-step:last-child {\n  flex: none;\n}\n.steps-step:not(:first-of-type) {\n  padding-left: 0.75rem;\n}\n.stpes-root[data-orientation='vertical'] .steps-step:not(:first-of-type) {\n  margin-top: 0.625rem;\n  padding-left: 0;\n}\n.stpes-root[data-orientation='vertical'] .steps-step {\n  padding-bottom: 1.25rem;\n  align-items: flex-start;\n}\n\n.steps-indicator {\n  margin-right: 0.375rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  width: 1.875rem;\n  height: 1.875rem;\n\n  border: 0.0625rem solid;\n  border-radius: 50%;\n  line-height: 1.875rem;\n}\n.steps-indicator > svg {\n  display: inline-block;\n  vertical-align: inherit;\n}\n.steps-step[data-status='wait'] .steps-indicator {\n  background: inherit;\n  border-color: rgba(224, 216, 216, 0.54);\n  color: rgba(224, 216, 216, 0.54);\n}\n.steps-step[data-status='process'] .steps-indicator {\n  background: #208aff;\n  border-color: #208aff;\n  color: #e2e8f0;\n}\n.steps-step[data-status='finish'] .steps-indicator {\n  background: inherit;\n  border-color: #208aff;\n  color: #208aff;\n}\n.steps-step[data-status='error'] .steps-indicator {\n  background: inherit;\n  border-color: #e23731;\n  color: #e23731;\n}\n\n.steps-content {\n  flex-shrink: 0;\n}\n.steps-step[data-status='wait'] .steps-content {\n  color: rgba(224, 216, 216, 0.54);\n}\n.steps-step[data-status='process'] .steps-content {\n  color: #e2e8f0;\n}\n.steps-step[data-status='finish'] .steps-content {\n  color: #e2e8f0;\n}\n.steps-step[data-status='error'] .steps-content {\n  color: #e23731;\n}\n\n.steps-separator {\n  width: 100%;\n  height: 2px;\n  background-color: rgba(255, 255, 255, 0.35);\n}\n.steps-separator[data-orientation='horizontal'] {\n  margin-inline-start: 0.5rem;\n}\n.steps-separator[data-orientation='vertical'] {\n  position: absolute;\n  width: 0.125rem;\n  height: 100%;\n  top: 2.125rem;\n  left: 0.875rem;\n  margin-block-start: 0.5rem;\n}\n`,children:(0,t.jsx)(\"code\",{source:`.steps-container {\n  width: 100%;\n  padding-left: 3.125rem;\n  padding-right: 3.125rem;\n}\n\n.steps-move {\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.3125rem;\n  margin-top: 1.25rem;\n  color: #e2e8f0;\n}\n.steps-move button {\n  border: 0.0313rem solid;\n  border-radius: 0.3125rem;\n  border-color: rgba(194, 215, 175, 0.464);\n  padding: 0.3125rem 0.625rem;\n}\n.steps-move button:hover {\n  background-color: rgb(104, 106, 234);\n}\n\n.stpes-root {\n  display: flex;\n}\n.stpes-root[data-orientation='vertical'] {\n  flex-direction: column;\n}\n\n.steps-step {\n  padding: 0;\n  margin: 0;\n  align-items: center;\n  position: relative;\n  flex: 1;\n  display: flex;\n  overflow: hidden;\n}\n.steps-step:last-child {\n  flex: none;\n}\n.steps-step:not(:first-of-type) {\n  padding-left: 0.75rem;\n}\n.stpes-root[data-orientation='vertical'] .steps-step:not(:first-of-type) {\n  margin-top: 0.625rem;\n  padding-left: 0;\n}\n.stpes-root[data-orientation='vertical'] .steps-step {\n  padding-bottom: 1.25rem;\n  align-items: flex-start;\n}\n\n.steps-indicator {\n  margin-right: 0.375rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  width: 1.875rem;\n  height: 1.875rem;\n\n  border: 0.0625rem solid;\n  border-radius: 50%;\n  line-height: 1.875rem;\n}\n.steps-indicator > svg {\n  display: inline-block;\n  vertical-align: inherit;\n}\n.steps-step[data-status='wait'] .steps-indicator {\n  background: inherit;\n  border-color: rgba(224, 216, 216, 0.54);\n  color: rgba(224, 216, 216, 0.54);\n}\n.steps-step[data-status='process'] .steps-indicator {\n  background: #208aff;\n  border-color: #208aff;\n  color: #e2e8f0;\n}\n.steps-step[data-status='finish'] .steps-indicator {\n  background: inherit;\n  border-color: #208aff;\n  color: #208aff;\n}\n.steps-step[data-status='error'] .steps-indicator {\n  background: inherit;\n  border-color: #e23731;\n  color: #e23731;\n}\n\n.steps-content {\n  flex-shrink: 0;\n}\n.steps-step[data-status='wait'] .steps-content {\n  color: rgba(224, 216, 216, 0.54);\n}\n.steps-step[data-status='process'] .steps-content {\n  color: #e2e8f0;\n}\n.steps-step[data-status='finish'] .steps-content {\n  color: #e2e8f0;\n}\n.steps-step[data-status='error'] .steps-content {\n  color: #e23731;\n}\n\n.steps-separator {\n  width: 100%;\n  height: 2px;\n  background-color: rgba(255, 255, 255, 0.35);\n}\n.steps-separator[data-orientation='horizontal'] {\n  margin-inline-start: 0.5rem;\n}\n.steps-separator[data-orientation='vertical'] {\n  position: absolute;\n  width: 0.125rem;\n  height: 100%;\n  top: 2.125rem;\n  left: 0.875rem;\n  margin-block-start: 0.5rem;\n}\n`})})]})]}),`\n`,(0,t.jsx)(e.h2,{children:\"Installation\"}),`\n`,(0,t.jsx)(S,{command:{npm:\"npm i @melio-ui/steps\",yarn:\"yarn add @melio-ui/steps\",pnpm:\"pnpm add @melio-ui/steps\",bun:\"bun add @melio-ui/steps\"}}),`\n`,(0,t.jsx)(e.h2,{children:\"Import\"}),`\n`,(0,t.jsx)(l,{command:{individual:`import { \n  StepsRoot,\n  StepsStep,\n  StepsIndicator,\n  StepsStatus,\n  StepsContent,\n  StepsSeparator,\n} from '@melio-ui/steps';`,global:`import { \n  StepsRoot,\n  StepsStep,\n  StepsIndicator,\n  StepsStatus,\n  StepsContent,\n  StepsSeparator,\n} from '@melio-ui/react';`}}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"StepsRoot\"}),\": All parts of the steps are included.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"StepsStep\"}),\": A single step in the sequence.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"StepsIndicator\"}),\": A component displaying markers that update as the user advances through steps, clearly tracking progress.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"StepsStatus\"}),\": Indicates the status of the step.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"StepsContent\"}),\": Additional content for a step.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"StepsSeparator\"}),\": Divider between steps.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Another way to import\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`'use client';\n\nimport { Steps } from '@melio-ui/steps';\n\n<Steps.Root currentStep={1}>\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step01</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step02</div>\n      <div>This is a description</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n</Steps.Root>;\n`})}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsx)(e.p,{children:\"'use client' must be used when rendering on the server side.\"}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"API Reference\"}),`\n`,(0,t.jsx)(e.h3,{children:\"StepsRoot\"}),`\n`,(0,t.jsx)(e.p,{children:\"All parts of the steps are included.\"}),`\n`,(0,t.jsx)(p,{data:[{name:\"currentStep\",required:!1,type:\"number\",description:\"Index of the current step.\"},{name:\"orientation\",required:!1,type:(0,t.jsxs)(t.Fragment,{children:[\"TypeAttributes.Orientation\",(0,t.jsx)(e.br,{}),(0,t.jsx)(e.br,{}),'\"horizontal\" | \"vertical\"']}),description:\"Direction for the placement of the Steps component.\"}]}),`\n`,(0,t.jsx)(a,{data:[{attribute:\"[data-orientation]\",values:'\"horizontal\" | \"vertical\"'}]}),`\n`,(0,t.jsx)(e.h3,{children:\"StepsStep\"}),`\n`,(0,t.jsx)(e.p,{children:\"A single step in the sequence.\"}),`\n`,(0,t.jsx)(p,{data:[{name:\"status\",required:!1,type:(0,t.jsxs)(t.Fragment,{children:[\"StepStatusValue\",(0,t.jsx)(e.br,{}),(0,t.jsx)(e.br,{}),'\"finish\" | \"wait\" | \"process\" | \"error\"']}),description:\"Sets the state of the step.\"}]}),`\n`,(0,t.jsx)(a,{data:[{attribute:\"[data-status]\",values:'\"finish\" | \"wait\" | \"process\" | \"error\"'},{attribute:\"[data-orientation]\",values:'\"horizontal\" | \"vertical\"'}]}),`\n`,(0,t.jsx)(e.h3,{children:\"StepsIndicator\"}),`\n`,(0,t.jsx)(e.p,{children:\"A component displaying markers that update as the user advances through steps, clearly tracking progress.\"}),`\n`,(0,t.jsx)(p,{data:[{name:\"children\",required:!0,type:\"React.ReactNode | (status: StepStatusValue) => React.ReactNode\",description:\"An element that renders the state of a step.\"}]}),`\n`,(0,t.jsx)(a,{data:[{attribute:\"[data-status]\",values:'\"finish\" | \"wait\" | \"process\" | \"error\"'},{attribute:\"[data-orientation]\",values:'\"horizontal\" | \"vertical\"'}]}),`\n`,(0,t.jsx)(e.h3,{children:\"StepsStatus\"}),`\n`,(0,t.jsx)(e.p,{children:\"Indicates the status of the step.\"}),`\n`,(0,t.jsx)(p,{data:[{name:\"finish\",required:!1,type:\"React.ReactNode\",description:\"Element indicating completion status.\"},{name:\"wait\",required:!1,type:\"React.ReactNode\",description:\"Element indicating waiting state.\"},{name:\"process\",required:!1,type:\"React.ReactNode\",description:\"Element that indicates the state of the process.\"},{name:\"error\",required:!1,type:\"React.ReactNode\",description:\"Element indicating error state.\"}]}),`\n`,(0,t.jsx)(a,{data:[{attribute:\"[data-status]\",values:'\"finish\" | \"wait\" | \"process\" | \"error\"'},{attribute:\"[data-orientation]\",values:'\"horizontal\" | \"vertical\"'}]}),`\n`,(0,t.jsx)(e.h3,{children:\"StepsContent\"}),`\n`,(0,t.jsx)(e.p,{children:\"Additional content for a step.\"}),`\n`,(0,t.jsx)(p,{data:[{name:\"children\",required:!0,type:\"React.ReactNode | (status: StepStatusValue) => React.ReactNode\",description:\"An element that renders the content of a step.\"}]}),`\n`,(0,t.jsx)(a,{data:[{attribute:\"[data-status]\",values:'\"finish\" | \"wait\" | \"process\" | \"error\"'},{attribute:\"[data-orientation]\",values:'\"horizontal\" | \"vertical\"'}]}),`\n`,(0,t.jsx)(e.h3,{children:\"StepsSeparator\"}),`\n`,(0,t.jsx)(e.p,{children:\"Divider between steps.\"}),`\n`,(0,t.jsx)(a,{data:[{attribute:\"[data-orientation]\",values:'\"horizontal\" | \"vertical\"'}]}),`\n`,(0,t.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Set status on step\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`<Steps.Root currentStep={0}>\n  <Steps.Step status=\"error\">\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step01</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step02</div>\n      <div>This is a description</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step03</div>\n    </Steps.Content>\n  </Steps.Step>\n</Steps.Root>\n`})}),`\n`,(0,t.jsx)(e.h3,{children:\"Custom status via props.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",render:\"true\",children:`function CustomStatusProps() {\n  return (\n    <Steps.Root currentStep={1}>\n      <Steps.Step status=\"error\">\n        <Steps.Indicator>\n          <Steps.Status finish={<UserIcon />} error={<UserIcon color=\"red\" />} />\n        </Steps.Indicator>\n        <Steps.Content>\n          <div>Step01</div>\n        </Steps.Content>\n        <Steps.Separator />\n      </Steps.Step>\n\n      <Steps.Step>\n        <Steps.Indicator>\n          <Steps.Status finish={<UserIcon />} error={<UserIcon color=\"red\" />} />\n        </Steps.Indicator>\n        <Steps.Content>\n          <div>Step02</div>\n          <div>This is a description</div>\n        </Steps.Content>\n        <Steps.Separator />\n      </Steps.Step>\n\n      <Steps.Step>\n        <Steps.Indicator>\n          <Steps.Status wait={<UserIcon color=\"gray\" />} />\n        </Steps.Indicator>\n        <Steps.Content>\n          <div>Step03</div>\n        </Steps.Content>\n      </Steps.Step>\n    </Steps.Root>\n  );\n}\n\nrender(<CustomStatusProps />);\n\nfunction UserIcon() {\n  return (\n    <svg\n      width=\"2em\"\n      height=\"2em\"\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\" />\n    </svg>\n  );\n}\n`})}),`\n`,(0,t.jsx)(e.h3,{children:\"Custom status via function.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",render:\"true\",children:`function CustomStatusFunc() {\n  return (\n    <Steps.Root currentStep={1}>\n      <Steps.Step status=\"wait\">\n        <Steps.Indicator>\n        {(status: StepStatusValue) =>\n          status === 'wait' ? <UserIcon color=\"gray\" /> : <UserIcon />\n        }\n        </Steps.Indicator>\n        <Steps.Content>\n          <div>Step01</div>\n        </Steps.Content>\n        <Steps.Separator />\n      </Steps.Step>\n\n      <Steps.Step>\n        <Steps.Indicator>\n          <Steps.Status />\n        </Steps.Indicator>\n        <Steps.Content>\n          <div>Step02</div>\n          <div>This is a description</div>\n        </Steps.Content>\n        <Steps.Separator />\n      </Steps.Step>\n\n      <Steps.Step>\n        <Steps.Indicator>\n          <Steps.Status />\n        </Steps.Indicator>\n        <Steps.Content>\n          <div>Step03</div>\n        </Steps.Content>\n      </Steps.Step>\n    </Steps.Root>\n  );\n}\n\nrender(<CustomStatusFunc />);\n\nfunction UserIcon() {\n  return (\n    <svg\n      width=\"2em\"\n      height=\"2em\"\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\" />\n    </svg>\n  );\n}\n`})}),`\n`,(0,t.jsx)(e.h3,{children:\"Custom content via function.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`<Steps.Root currentStep={1}>\n  <Steps.Step status=\"finish\">\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      {(status: StepStatusValue) =>\n        status === 'finish' ? (\n          <div>Step01 - {status}</div>\n        ) : (\n          <>\n            <div>Step01 - {status}</div>\n            <div>This is a description</div>\n          </>\n        )\n      }\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step02</div>\n      <div>This is a description</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step03</div>\n    </Steps.Content>\n  </Steps.Step>\n</Steps.Root>\n`})}),`\n`,(0,t.jsx)(e.h3,{children:\"Custom content via function.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`<Steps.Root orientation=\"vertical\" currentStep={0}>\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step01</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step02</div>\n      <div>This is a description</div>\n    </Steps.Content>\n    <Steps.Separator />\n  </Steps.Step>\n\n  <Steps.Step>\n    <Steps.Indicator>\n      <Steps.Status />\n    </Steps.Indicator>\n    <Steps.Content>\n      <div>Step03</div>\n    </Steps.Content>\n  </Steps.Step>\n</Steps.Root>\n`})})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(v,n)})):v(n)}var j=k;function o(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return y(D);})();\n;return Component;"
  },
  "_id": "components/steps.mdx",
  "_raw": {
    "sourceFilePath": "components/steps.mdx",
    "sourceFileName": "steps.mdx",
    "sourceFileDir": "components",
    "contentType": "mdx",
    "flattenedPath": "components/steps"
  },
  "type": "Doc",
  "slug": "/components/steps",
  "frontMatter": {
    "title": "Steps",
    "slug": "/components/steps"
  }
}