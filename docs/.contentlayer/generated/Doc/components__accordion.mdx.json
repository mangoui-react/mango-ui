{
  "title": "Accordion",
  "scope": "usage",
  "nextTitle": "Alert",
  "nextSlug": "/components/alert",
  "body": {
    "raw": "\n# Accordion\n\n<Description>\n  Accordions display a list of high-level options that can expand/collapse to reveal more\n  information.\n</Description>\n\n<DemoContainer>\n  <AccordionDemo />\n  <DemoCodeBlock component=\"accordion\" />\n</DemoContainer>\n\n## Installation\n\n<PackageManagers\n  command={{\n    npm: 'npm i @melio-ui/accordion',\n    yarn: 'yarn add @melio-ui/accordion',\n    pnpm: 'pnpm add @melio-ui/accordion',\n    bun: 'bun add @melio-ui/accordion',\n  }}\n/>\n\n## Import\n\n<ImportSyntax\n  command={{\n    individual: `import { \n  AccordionRoot, \n  AccordionItem, \n  AccordionHeader, \n  AccordionArrow, \n  AccordionContent,\n} from '@melio-ui/accordion';`,\n    global: `import { \n  AccordionRoot, \n  AccordionItem, \n  AccordionHeader, \n  AccordionArrow, \n  AccordionContent, \n} from '@melio-ui/react';`,\n  }}\n/>\n\n- **AccordionRoot**: All parts of the accordion are included.\n- **AccordionItem**: Includes all parts of the collapsible section.\n- **AccordionHeader**: This item switches the expand/collapse state of the accordion item. This item has a titled element.\n- **AccordionArrow**: Down arrow icon rotating based on expand/collapse state.\n- **AccordionContent**: Contains the collapsible content for an item.\n\n### Another way to import\n\n```js\n'use client';\n\nimport { Accordion } from '@melio-ui/accordion';\n\n<Accordion.Root>\n  <Accordion.Item>\n    <Accordion.Header>\n      <div>Panel Title1</div>\n      <Accordion.ArrowIcon />\n    </Accordion.Header>\n    <Accordion.Content>Content1</Accordion.Content>\n  </Accordion.Item>\n</Accordion.Root>;\n```\n\n> 'use client' must be used when rendering on the server side.\n\n## API Reference\n\n### AccordionRoot\n\nAll parts of the accordion are included.\n\n<PropsTable\n  data={[\n    {\n      name: 'value',\n      required: false,\n      type: 'ExpandedValueType',\n      description: 'The value of the expanded accordion item.',\n    },\n    {\n      name: 'defaultValue',\n      required: false,\n      type: 'ExpandedValueType',\n      description: 'The initial value of the expanded accordion item.',\n    },\n    {\n      name: 'toggle',\n      required: false,\n      default: 'false',\n      type: 'boolean',\n      description: 'accordion item can be collapsed again it or not.',\n    },\n    {\n      name: 'multiple',\n      required: false,\n      default: 'false',\n      type: 'boolean',\n      description: 'multiple accordion item can be expanded at once or not.',\n    },\n    {\n      name: 'disabled',\n      required: false,\n      type: 'boolean',\n      default: 'false',\n      description: 'all the accordion item will be disabled or not.',\n    },\n    {\n      name: 'renderMode',\n      required: false,\n      type: '\"selecting\" | \"selected\" | \"force\"',\n      default: '\"selecting\"',\n      description: (\n        <>\n          How to render accordion item.\n          <br />\n          <br />\n          selecting: Rendering only the currently expanded accordion item.\n          <br />\n          selected: Rendering accordion items that have been expanded.\n          <br />\n          force: Rendering all accordion items.\n        </>\n      ),\n    },\n    {\n      name: 'onValueChange',\n      required: false,\n      type: '(value: ExpandedValueType) => void',\n      description: 'The callback invoked when expanded or collapsed an accordion item.',\n    },\n  ]}\n/>\n\n### AccordionItem\n\nIncludes all parts of the collapsible section.\n\n<PropsTable\n  data={[\n    {\n      name: 'value',\n      required: false,\n      type: 'string',\n      description: 'The value of the accordion item.',\n    },\n    {\n      name: 'disabled',\n      required: false,\n      type: 'boolean',\n      description: 'the accordion item will be disabled or not.',\n    },\n    {\n      name: 'children',\n      required: false,\n      type: 'React.ReactNode | ((expanded: boolean) => React.ReactNode)',\n      description: 'children of accordion item',\n    },\n  ]}\n/>\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-state]',\n      values: '\"open\" | \"closed\"',\n    },\n    {\n      attribute: '[data-disabled]',\n      values: 'Visible when disabled',\n    },\n  ]}\n/>\n\n### AccordionHeader\n\nThis item switches the expand/collapse state of the accordion item. This item has a titled element.\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-state]',\n      values: '\"open\" | \"closed\"',\n    },\n    {\n      attribute: '[data-disabled]',\n      values: 'Visible when disabled',\n    },\n  ]}\n/>\n\n### AccordionContent\n\nContains the collapsible content for an item.\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-state]',\n      values: '\"open\" | \"closed\"',\n    },\n    {\n      attribute: '[data-disabled]',\n      values: 'Visible when disabled',\n    },\n  ]}\n/>\n\n### AccordionArrowIcon\n\nDown arrow icon rotating based on expand/collapse state.\n\n## Examples\n\n### Expanded by defaultValue\n\n```jsx render=true\nconst DefaultValue = () => {\n  return (\n    <Accordion.Root defaultValue=\"item2\">\n      <Accordion.Item value=\"item1\">\n        <Accordion.Header>\n          <div style={{ flex: '1 1 0%' }}>Panel Title1</div>\n          <Accordion.ArrowIcon />\n        </Accordion.Header>\n        <Accordion.Content>Content1</Accordion.Content>\n      </Accordion.Item>\n\n      <Accordion.Item value=\"item2\">\n        <Accordion.Header>\n          <div style={{ flex: '1 1 0%' }}>Panel Title2</div>\n          <Accordion.ArrowIcon />\n        </Accordion.Header>\n        <Accordion.Content>Content2</Accordion.Content>\n      </Accordion.Item>\n    </Accordion.Root>\n  );\n};\n\nrender(<DefaultValue />);\n```\n",
    "code": "var Component=(()=>{var f=Object.create;var a=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var C=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),y=(o,e)=>{for(var r in e)a(o,r,{get:e[r],enumerable:!0})},h=(o,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of w(e))!I.call(o,t)&&t!==r&&a(o,t,{get:()=>e[t],enumerable:!(i=g(e,t))||i.enumerable});return o};var H=(o,e,r)=>(r=o!=null?f(x(o)):{},h(e||!o||!o.__esModule?a(r,\"default\",{value:o,enumerable:!0}):r,o)),N=o=>h(a({},\"__esModule\",{value:!0}),o);var u=C((q,A)=>{A.exports=_jsx_runtime});var D={};y(D,{default:()=>T,frontmatter:()=>v});var n=H(u()),v={title:\"Accordion\",nextTitle:\"Alert\",nextSlug:\"/components/alert\"};function b(o){let e=Object.assign({h1:\"h1\",p:\"p\",h2:\"h2\",ul:\"ul\",li:\"li\",strong:\"strong\",h3:\"h3\",pre:\"pre\",code:\"code\",blockquote:\"blockquote\",br:\"br\"},o.components),{Description:r,DemoContainer:i,AccordionDemo:t,DemoCodeBlock:s,PackageManagers:m,ImportSyntax:p,PropsTable:l,DataAttributesTable:d}=e;return t||c(\"AccordionDemo\",!0),d||c(\"DataAttributesTable\",!0),s||c(\"DemoCodeBlock\",!0),i||c(\"DemoContainer\",!0),r||c(\"Description\",!0),p||c(\"ImportSyntax\",!0),m||c(\"PackageManagers\",!0),l||c(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"Accordion\"}),`\n`,(0,n.jsx)(r,{children:(0,n.jsx)(e.p,{children:`Accordions display a list of high-level options that can expand/collapse to reveal more\ninformation.`})}),`\n`,(0,n.jsxs)(i,{children:[(0,n.jsx)(t,{}),(0,n.jsxs)(s,{component:\"accordion\",children:[(0,n.jsx)(\"pre\",{title:\"index.tsx\",source:`import React from 'react';\n\nimport {\n  AccordionArrowIcon,\n  AccordionContent,\n  AccordionHeader,\n  AccordionItem,\n  AccordionRoot,\n} from '@melio-ui/accordion';\n\nimport './styles.css';\n\nexport default function AccordionDemo() {\n  return (\n    <AccordionRoot className=\"root\">\n      <AccordionItem className=\"item\">\n        <AccordionHeader className=\"header\">\n          <span className=\"title\">Panel Header</span>\n          <AccordionArrowIcon />\n        </AccordionHeader>\n        <AccordionContent className=\"content\">Content1</AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem className=\"item\">\n        <AccordionHeader className=\"header\">\n          <span className=\"title\">Panel Header2</span>\n          <AccordionArrowIcon />\n        </AccordionHeader>\n        <AccordionContent className=\"content\">Content2</AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem className=\"item\">\n        <AccordionHeader className=\"header\">\n          <span className=\"title\">Panel Header3</span>\n          <AccordionArrowIcon />\n        </AccordionHeader>\n        <AccordionContent className=\"content\">Content3</AccordionContent>\n      </AccordionItem>\n    </AccordionRoot>\n  );\n}\n`,children:(0,n.jsx)(\"code\",{source:`import React from 'react';\n\nimport {\n  AccordionArrowIcon,\n  AccordionContent,\n  AccordionHeader,\n  AccordionItem,\n  AccordionRoot,\n} from '@melio-ui/accordion';\n\nimport './styles.css';\n\nexport default function AccordionDemo() {\n  return (\n    <AccordionRoot className=\"root\">\n      <AccordionItem className=\"item\">\n        <AccordionHeader className=\"header\">\n          <span className=\"title\">Panel Header</span>\n          <AccordionArrowIcon />\n        </AccordionHeader>\n        <AccordionContent className=\"content\">Content1</AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem className=\"item\">\n        <AccordionHeader className=\"header\">\n          <span className=\"title\">Panel Header2</span>\n          <AccordionArrowIcon />\n        </AccordionHeader>\n        <AccordionContent className=\"content\">Content2</AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem className=\"item\">\n        <AccordionHeader className=\"header\">\n          <span className=\"title\">Panel Header3</span>\n          <AccordionArrowIcon />\n        </AccordionHeader>\n        <AccordionContent className=\"content\">Content3</AccordionContent>\n      </AccordionItem>\n    </AccordionRoot>\n  );\n}\n`})}),(0,n.jsx)(\"pre\",{title:\"styles.css\",source:`.root {\n  margin: 0;\n  padding: 0;\n  background-color: #000000;\n  border-width: 0.0625rem;\n  border-style: solid;\n  border-color: #5a5757;\n  border-radius: 0.125rem;\n  border-bottom-width: 0;\n  color: #e2e8f0;\n  width: 300px;\n}\n\n.item {\n  border-bottom-width: 0.0625rem;\n  border-bottom-color: #5a5757;\n}\n\n.header {\n  display: flex;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n  cursor: pointer;\n}\n\n.title {\n  flex: 1 1 0%;\n  text-align: left;\n}\n\n.content {\n  border-top-width: 0.0625rem;\n  border-top-color: #5a5757;\n  padding: 1rem;\n}\n\n.arrow {\n  width: 1.25rem;\n  height: 1.25rem;\n}\n\n.openArrow {\n  width: 1.25rem;\n  height: 1.25rem;\n  transform: rotate(180deg);\n}\n\n.closeArrow {\n  width: 1.25rem;\n  height: 1.25rem;\n  transition: transform 0.2s;\n}\n`,children:(0,n.jsx)(\"code\",{source:`.root {\n  margin: 0;\n  padding: 0;\n  background-color: #000000;\n  border-width: 0.0625rem;\n  border-style: solid;\n  border-color: #5a5757;\n  border-radius: 0.125rem;\n  border-bottom-width: 0;\n  color: #e2e8f0;\n  width: 300px;\n}\n\n.item {\n  border-bottom-width: 0.0625rem;\n  border-bottom-color: #5a5757;\n}\n\n.header {\n  display: flex;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n  cursor: pointer;\n}\n\n.title {\n  flex: 1 1 0%;\n  text-align: left;\n}\n\n.content {\n  border-top-width: 0.0625rem;\n  border-top-color: #5a5757;\n  padding: 1rem;\n}\n\n.arrow {\n  width: 1.25rem;\n  height: 1.25rem;\n}\n\n.openArrow {\n  width: 1.25rem;\n  height: 1.25rem;\n  transform: rotate(180deg);\n}\n\n.closeArrow {\n  width: 1.25rem;\n  height: 1.25rem;\n  transition: transform 0.2s;\n}\n`})})]})]}),`\n`,(0,n.jsx)(e.h2,{children:\"Installation\"}),`\n`,(0,n.jsx)(m,{command:{npm:\"npm i @melio-ui/accordion\",yarn:\"yarn add @melio-ui/accordion\",pnpm:\"pnpm add @melio-ui/accordion\",bun:\"bun add @melio-ui/accordion\"}}),`\n`,(0,n.jsx)(e.h2,{children:\"Import\"}),`\n`,(0,n.jsx)(p,{command:{individual:`import { \n  AccordionRoot, \n  AccordionItem, \n  AccordionHeader, \n  AccordionArrow, \n  AccordionContent,\n} from '@melio-ui/accordion';`,global:`import { \n  AccordionRoot, \n  AccordionItem, \n  AccordionHeader, \n  AccordionArrow, \n  AccordionContent, \n} from '@melio-ui/react';`}}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"AccordionRoot\"}),\": All parts of the accordion are included.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"AccordionItem\"}),\": Includes all parts of the collapsible section.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"AccordionHeader\"}),\": This item switches the expand/collapse state of the accordion item. This item has a titled element.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"AccordionArrow\"}),\": Down arrow icon rotating based on expand/collapse state.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"AccordionContent\"}),\": Contains the collapsible content for an item.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Another way to import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`'use client';\n\nimport { Accordion } from '@melio-ui/accordion';\n\n<Accordion.Root>\n  <Accordion.Item>\n    <Accordion.Header>\n      <div>Panel Title1</div>\n      <Accordion.ArrowIcon />\n    </Accordion.Header>\n    <Accordion.Content>Content1</Accordion.Content>\n  </Accordion.Item>\n</Accordion.Root>;\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"'use client' must be used when rendering on the server side.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"API Reference\"}),`\n`,(0,n.jsx)(e.h3,{children:\"AccordionRoot\"}),`\n`,(0,n.jsx)(e.p,{children:\"All parts of the accordion are included.\"}),`\n`,(0,n.jsx)(l,{data:[{name:\"value\",required:!1,type:\"ExpandedValueType\",description:\"The value of the expanded accordion item.\"},{name:\"defaultValue\",required:!1,type:\"ExpandedValueType\",description:\"The initial value of the expanded accordion item.\"},{name:\"toggle\",required:!1,default:\"false\",type:\"boolean\",description:\"accordion item can be collapsed again it or not.\"},{name:\"multiple\",required:!1,default:\"false\",type:\"boolean\",description:\"multiple accordion item can be expanded at once or not.\"},{name:\"disabled\",required:!1,type:\"boolean\",default:\"false\",description:\"all the accordion item will be disabled or not.\"},{name:\"renderMode\",required:!1,type:'\"selecting\" | \"selected\" | \"force\"',default:'\"selecting\"',description:(0,n.jsxs)(n.Fragment,{children:[\"How to render accordion item.\",(0,n.jsx)(e.br,{}),(0,n.jsx)(e.br,{}),\"selecting: Rendering only the currently expanded accordion item.\",(0,n.jsx)(e.br,{}),\"selected: Rendering accordion items that have been expanded.\",(0,n.jsx)(e.br,{}),\"force: Rendering all accordion items.\"]})},{name:\"onValueChange\",required:!1,type:\"(value: ExpandedValueType) => void\",description:\"The callback invoked when expanded or collapsed an accordion item.\"}]}),`\n`,(0,n.jsx)(e.h3,{children:\"AccordionItem\"}),`\n`,(0,n.jsx)(e.p,{children:\"Includes all parts of the collapsible section.\"}),`\n`,(0,n.jsx)(l,{data:[{name:\"value\",required:!1,type:\"string\",description:\"The value of the accordion item.\"},{name:\"disabled\",required:!1,type:\"boolean\",description:\"the accordion item will be disabled or not.\"},{name:\"children\",required:!1,type:\"React.ReactNode | ((expanded: boolean) => React.ReactNode)\",description:\"children of accordion item\"}]}),`\n`,(0,n.jsx)(d,{data:[{attribute:\"[data-state]\",values:'\"open\" | \"closed\"'},{attribute:\"[data-disabled]\",values:\"Visible when disabled\"}]}),`\n`,(0,n.jsx)(e.h3,{children:\"AccordionHeader\"}),`\n`,(0,n.jsx)(e.p,{children:\"This item switches the expand/collapse state of the accordion item. This item has a titled element.\"}),`\n`,(0,n.jsx)(d,{data:[{attribute:\"[data-state]\",values:'\"open\" | \"closed\"'},{attribute:\"[data-disabled]\",values:\"Visible when disabled\"}]}),`\n`,(0,n.jsx)(e.h3,{children:\"AccordionContent\"}),`\n`,(0,n.jsx)(e.p,{children:\"Contains the collapsible content for an item.\"}),`\n`,(0,n.jsx)(d,{data:[{attribute:\"[data-state]\",values:'\"open\" | \"closed\"'},{attribute:\"[data-disabled]\",values:\"Visible when disabled\"}]}),`\n`,(0,n.jsx)(e.h3,{children:\"AccordionArrowIcon\"}),`\n`,(0,n.jsx)(e.p,{children:\"Down arrow icon rotating based on expand/collapse state.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Expanded by defaultValue\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",render:\"true\",children:`const DefaultValue = () => {\n  return (\n    <Accordion.Root defaultValue=\"item2\">\n      <Accordion.Item value=\"item1\">\n        <Accordion.Header>\n          <div style={{ flex: '1 1 0%' }}>Panel Title1</div>\n          <Accordion.ArrowIcon />\n        </Accordion.Header>\n        <Accordion.Content>Content1</Accordion.Content>\n      </Accordion.Item>\n\n      <Accordion.Item value=\"item2\">\n        <Accordion.Header>\n          <div style={{ flex: '1 1 0%' }}>Panel Title2</div>\n          <Accordion.ArrowIcon />\n        </Accordion.Header>\n        <Accordion.Content>Content2</Accordion.Content>\n      </Accordion.Item>\n    </Accordion.Root>\n  );\n};\n\nrender(<DefaultValue />);\n`})})]})}function R(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(b,o)})):b(o)}var T=R;function c(o,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return N(D);})();\n;return Component;"
  },
  "_id": "components/accordion.mdx",
  "_raw": {
    "sourceFilePath": "components/accordion.mdx",
    "sourceFileName": "accordion.mdx",
    "sourceFileDir": "components",
    "contentType": "mdx",
    "flattenedPath": "components/accordion"
  },
  "type": "Doc",
  "slug": "/components/accordion",
  "frontMatter": {
    "title": "Accordion",
    "slug": "/components/accordion"
  }
}