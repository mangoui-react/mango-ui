{
  "title": "Tooltip",
  "scope": "usage",
  "prevTitle": "Toast",
  "prevSlug": "/components/toast",
  "body": {
    "raw": "\n# Tooltip\n\n<Description>\n  A popup displaying information when an element receives keyboard focus or mouse hover.\n</Description>\n\n<DemoContainer>\n  <TooltipDemo />\n  <DemoCodeBlock component=\"tooltip\" />\n</DemoContainer>\n\n## Installation\n\n<PackageManagers\n  command={{\n    npm: 'npm i @melio-ui/tooltip',\n    yarn: 'yarn add @melio-ui/tooltip',\n    pnpm: 'pnpm add @melio-ui/tooltip',\n    bun: 'bun add @melio-ui/tooltip',\n  }}\n/>\n\n## Import\n\n<ImportSyntax\n  command={{\n    individual: `import { \n  TooltipRoot,\n  TooltipTrigger,\n  TooltipPortal,\n  TooltipContent,\n  TooltipArrow,\n} from '@melio-ui/tooltip';`,\n    global: `import { \n  TooltipRoot,\n  TooltipTrigger,\n  TooltipPortal,\n  TooltipContent,\n  TooltipArrow,\n} from '@melio-ui/react';`,\n  }}\n/>\n\n- **TooltipRoot**: All parts of the tooltip are included.\n- **TooltipTrigger**: Used to activate or open the Tooltip component.\n- **TooltipPortal**: Portal the overlay and content portion into the body.\n- **TooltipContent**: Includes the content that will be displayed in the open tooltip.\n- **TooltipArrow**: An optional arrow element for the tooltip, to be rendered within TooltipContent for visual association.\n\n### Another way to import\n\n```js\n'use client';\n\nimport { Tooltip } from '@melio-ui/tooltip';\n\n<Tooltip.Root>\n  <Tooltip.Trigger asChild>\n    <button>Tooltip</button>\n  </Tooltip.Trigger>\n  <Tooltip.Portal>\n    <Tooltip.Content>\n      tooltip message\n      <Tooltip.Arrow />\n    </Tooltip.Content>\n  </Tooltip.Portal>\n</Tooltip.Root>;\n```\n\n> 'use client' must be used when rendering on the server side.\n\n## API Reference\n\n### TooltipRoot\n\nAll parts of the tooltip are included.\n\n<PropsTable\n  data={[\n    {\n      name: 'open',\n      required: false,\n      type: 'boolean',\n      description: 'Sets whether the tooltip content is open or closed.',\n    },\n    {\n      name: 'defaultOpen',\n      required: false,\n      type: 'boolean',\n      description:\n        'When first rendered, the tooltip content is in an opened state. Use when there is no need to control the opened state.',\n    },\n    {\n      name: 'onOpenChange',\n      required: false,\n      type: '(open: boolean) => void',\n      description:\n        'This is an event handler that is triggered when the open state of the tooltip content changes.',\n    },\n  ]}\n/>\n\n### TooltipTrigger\n\nUsed to activate or open the Tooltip component.\n\n<PropsTable\n  data={[\n    {\n      name: 'asChild',\n      required: false,\n      type: 'boolean',\n      description:\n        'Changes the default rendering element passed as a child, merging its props and behavior.',\n    },\n  ]}\n/>\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-state]',\n      values: '\"open\" | \"closed\"',\n    },\n  ]}\n/>\n\n### TooltipPortal\n\nPortal the overlay and content portion into the body.\n\n<PropsTable\n  data={[\n    {\n      name: 'container',\n      required: false,\n      default: 'document.body',\n      type: 'HTMLElement | (() => HTMLElement)',\n      description: 'Specifies the container element to which the content should be portaled.',\n    },\n  ]}\n/>\n\n### TooltipContent\n\nIncludes the content that will be displayed in the open tooltip.\n\n<PropsTable\n  data={[\n    {\n      name: 'side',\n      required: false,\n      default: '\"top\"',\n      type: '\"top\" | \"right\" | \"bottom\" | \"left\"',\n      description: \"The ideal side of the trigger to render on when it's open.\",\n    },\n    {\n      name: 'sideOffset',\n      required: false,\n      default: '0',\n      type: 'number',\n      description: 'The pixel distance from the trigger.',\n    },\n    {\n      name: 'align',\n      required: false,\n      default: '\"center\"',\n      type: '\"start\" | \"center\" | \"end\"',\n      description: 'The desired alignment with the trigger, which may adjust if collisions happen.',\n    },\n    {\n      name: 'alignOffset',\n      required: false,\n      default: '0',\n      type: 'number',\n      description: 'A pixel offset from the \"start\" or \"end\" alignment choices.',\n    },\n  ]}\n/>\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-state]',\n      values: '\"open\" | \"closed\"',\n    },\n    {\n      attribute: '[data-side]',\n      values: '\"top\" | \"right\" | \"bottom\" | \"left\"',\n    },\n    {\n      attribute: '[data-align]',\n      values: '\"start\" | \"center\" | \"end\"',\n    },\n  ]}\n/>\n\n### TooltipArrow\n\nAn optional arrow element for the tooltip, to be rendered within TooltipContent for visual association.\n\n<PropsTable\n  data={[\n    {\n      name: 'asChild',\n      required: false,\n      type: 'boolean',\n      description:\n        'Changes the default rendering element passed as a child, merging its props and behavior.',\n    },\n    {\n      name: 'width',\n      required: false,\n      default: '10',\n      type: 'number',\n      description: \"The arrow's width measured in pixels.\",\n    },\n    {\n      name: 'height',\n      required: false,\n      default: '5',\n      type: 'number',\n      description: \"The arrow's height measured in pixels.\",\n    },\n  ]}\n/>\n\n## Examples\n\n### Display arrow\n\n```jsx\n<TooltipRoot>\n  <TooltipTrigger asChild>\n    <button type=\"button\" style={{ width: 200, border: '1px solid #5f76bb', padding: 5 }}>\n      Hover me\n    </button>\n  </TooltipTrigger>\n  <TooltipPortal>\n    <TooltipContent>\n      tooltip message\n      <TooltipArrow />\n    </TooltipContent>\n  </TooltipPortal>\n</TooltipRoot>\n```\n\n### Position Settings\n\n```jsx\n<TooltipRoot>\n  <TooltipTrigger asChild>\n    <button type=\"button\" style={{ width: 200, border: '1px solid #5f76bb', padding: 5 }}>\n      Hover me\n    </button>\n  </TooltipTrigger>\n  <TooltipPortal>\n    <TooltipContent side=\"bottom\" align=\"end\">\n      tooltip message\n      <TooltipArrow />\n    </TooltipContent>\n  </TooltipPortal>\n</TooltipRoot>\n```\n",
    "code": "var Component=(()=>{var f=Object.create;var p=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var x=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),v=(e,t)=>{for(var n in t)p(e,n,{get:t[n],enumerable:!0})},m=(e,t,n,a)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let i of w(t))!C.call(e,i)&&i!==n&&p(e,i,{get:()=>t[i],enumerable:!(a=b(t,i))||a.enumerable});return e};var P=(e,t,n)=>(n=e!=null?f(y(e)):{},m(t||!e||!e.__esModule?p(n,\"default\",{value:e,enumerable:!0}):n,e)),A=e=>m(p({},\"__esModule\",{value:!0}),e);var T=x((N,u)=>{u.exports=_jsx_runtime});var k={};v(k,{default:()=>D,frontmatter:()=>R});var o=P(T()),R={title:\"Tooltip\",prevTitle:\"Toast\",prevSlug:\"/components/toast\"};function g(e){let t=Object.assign({h1:\"h1\",p:\"p\",h2:\"h2\",ul:\"ul\",li:\"li\",strong:\"strong\",h3:\"h3\",pre:\"pre\",code:\"code\",blockquote:\"blockquote\"},e.components),{Description:n,DemoContainer:a,TooltipDemo:i,DemoCodeBlock:s,PackageManagers:c,ImportSyntax:h,PropsTable:l,DataAttributesTable:d}=t;return d||r(\"DataAttributesTable\",!0),s||r(\"DemoCodeBlock\",!0),a||r(\"DemoContainer\",!0),n||r(\"Description\",!0),h||r(\"ImportSyntax\",!0),c||r(\"PackageManagers\",!0),l||r(\"PropsTable\",!0),i||r(\"TooltipDemo\",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{children:\"Tooltip\"}),`\n`,(0,o.jsx)(n,{children:(0,o.jsx)(t.p,{children:\"A popup displaying information when an element receives keyboard focus or mouse hover.\"})}),`\n`,(0,o.jsxs)(a,{children:[(0,o.jsx)(i,{}),(0,o.jsxs)(s,{component:\"tooltip\",children:[(0,o.jsx)(\"pre\",{title:\"index.tsx\",source:`import React from 'react';\n\nimport {\n  TooltipArrow,\n  TooltipContent,\n  TooltipPortal,\n  TooltipRoot,\n  TooltipTrigger,\n} from '@melio-ui/tooltip';\n\nimport './styles.css';\n\nexport default function TooltipDemo() {\n  return (\n    <TooltipRoot>\n      <TooltipTrigger asChild>\n        <button className=\"tooltip-trigger\">Hover me</button>\n      </TooltipTrigger>\n      <TooltipPortal>\n        <TooltipContent className=\"tooltip-content\">\n          tooltip message\n          <TooltipArrow className=\"tooltip-arrow\" />\n        </TooltipContent>\n      </TooltipPortal>\n    </TooltipRoot>\n  );\n}\n`,children:(0,o.jsx)(\"code\",{source:`import React from 'react';\n\nimport {\n  TooltipArrow,\n  TooltipContent,\n  TooltipPortal,\n  TooltipRoot,\n  TooltipTrigger,\n} from '@melio-ui/tooltip';\n\nimport './styles.css';\n\nexport default function TooltipDemo() {\n  return (\n    <TooltipRoot>\n      <TooltipTrigger asChild>\n        <button className=\"tooltip-trigger\">Hover me</button>\n      </TooltipTrigger>\n      <TooltipPortal>\n        <TooltipContent className=\"tooltip-content\">\n          tooltip message\n          <TooltipArrow className=\"tooltip-arrow\" />\n        </TooltipContent>\n      </TooltipPortal>\n    </TooltipRoot>\n  );\n}\n`})}),(0,o.jsx)(\"pre\",{title:\"styles.css\",source:`.tooltip-trigger {\n  border: 0.0625rem solid rgba(255, 255, 255, 0.35);\n  border-radius: 0.25rem;\n  padding: 0.3125rem;\n  color: #e2e8f0;\n}\n\n.tooltip-content {\n  background-color: rgb(106, 114, 128);\n  color: #e2e8f0;\n  word-wrap: break-word;\n  padding: 0.25rem 0.625rem;\n  border-radius: 0.25rem;\n  max-width: 18.75rem;\n}\n\n.tooltip-arrow {\n  fill: rgb(106, 114, 128);\n}\n`,children:(0,o.jsx)(\"code\",{source:`.tooltip-trigger {\n  border: 0.0625rem solid rgba(255, 255, 255, 0.35);\n  border-radius: 0.25rem;\n  padding: 0.3125rem;\n  color: #e2e8f0;\n}\n\n.tooltip-content {\n  background-color: rgb(106, 114, 128);\n  color: #e2e8f0;\n  word-wrap: break-word;\n  padding: 0.25rem 0.625rem;\n  border-radius: 0.25rem;\n  max-width: 18.75rem;\n}\n\n.tooltip-arrow {\n  fill: rgb(106, 114, 128);\n}\n`})})]})]}),`\n`,(0,o.jsx)(t.h2,{children:\"Installation\"}),`\n`,(0,o.jsx)(c,{command:{npm:\"npm i @melio-ui/tooltip\",yarn:\"yarn add @melio-ui/tooltip\",pnpm:\"pnpm add @melio-ui/tooltip\",bun:\"bun add @melio-ui/tooltip\"}}),`\n`,(0,o.jsx)(t.h2,{children:\"Import\"}),`\n`,(0,o.jsx)(h,{command:{individual:`import { \n  TooltipRoot,\n  TooltipTrigger,\n  TooltipPortal,\n  TooltipContent,\n  TooltipArrow,\n} from '@melio-ui/tooltip';`,global:`import { \n  TooltipRoot,\n  TooltipTrigger,\n  TooltipPortal,\n  TooltipContent,\n  TooltipArrow,\n} from '@melio-ui/react';`}}),`\n`,(0,o.jsxs)(t.ul,{children:[`\n`,(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:\"TooltipRoot\"}),\": All parts of the tooltip are included.\"]}),`\n`,(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:\"TooltipTrigger\"}),\": Used to activate or open the Tooltip component.\"]}),`\n`,(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:\"TooltipPortal\"}),\": Portal the overlay and content portion into the body.\"]}),`\n`,(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:\"TooltipContent\"}),\": Includes the content that will be displayed in the open tooltip.\"]}),`\n`,(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:\"TooltipArrow\"}),\": An optional arrow element for the tooltip, to be rendered within TooltipContent for visual association.\"]}),`\n`]}),`\n`,(0,o.jsx)(t.h3,{children:\"Another way to import\"}),`\n`,(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:\"language-js\",children:`'use client';\n\nimport { Tooltip } from '@melio-ui/tooltip';\n\n<Tooltip.Root>\n  <Tooltip.Trigger asChild>\n    <button>Tooltip</button>\n  </Tooltip.Trigger>\n  <Tooltip.Portal>\n    <Tooltip.Content>\n      tooltip message\n      <Tooltip.Arrow />\n    </Tooltip.Content>\n  </Tooltip.Portal>\n</Tooltip.Root>;\n`})}),`\n`,(0,o.jsxs)(t.blockquote,{children:[`\n`,(0,o.jsx)(t.p,{children:\"'use client' must be used when rendering on the server side.\"}),`\n`]}),`\n`,(0,o.jsx)(t.h2,{children:\"API Reference\"}),`\n`,(0,o.jsx)(t.h3,{children:\"TooltipRoot\"}),`\n`,(0,o.jsx)(t.p,{children:\"All parts of the tooltip are included.\"}),`\n`,(0,o.jsx)(l,{data:[{name:\"open\",required:!1,type:\"boolean\",description:\"Sets whether the tooltip content is open or closed.\"},{name:\"defaultOpen\",required:!1,type:\"boolean\",description:\"When first rendered, the tooltip content is in an opened state. Use when there is no need to control the opened state.\"},{name:\"onOpenChange\",required:!1,type:\"(open: boolean) => void\",description:\"This is an event handler that is triggered when the open state of the tooltip content changes.\"}]}),`\n`,(0,o.jsx)(t.h3,{children:\"TooltipTrigger\"}),`\n`,(0,o.jsx)(t.p,{children:\"Used to activate or open the Tooltip component.\"}),`\n`,(0,o.jsx)(l,{data:[{name:\"asChild\",required:!1,type:\"boolean\",description:\"Changes the default rendering element passed as a child, merging its props and behavior.\"}]}),`\n`,(0,o.jsx)(d,{data:[{attribute:\"[data-state]\",values:'\"open\" | \"closed\"'}]}),`\n`,(0,o.jsx)(t.h3,{children:\"TooltipPortal\"}),`\n`,(0,o.jsx)(t.p,{children:\"Portal the overlay and content portion into the body.\"}),`\n`,(0,o.jsx)(l,{data:[{name:\"container\",required:!1,default:\"document.body\",type:\"HTMLElement | (() => HTMLElement)\",description:\"Specifies the container element to which the content should be portaled.\"}]}),`\n`,(0,o.jsx)(t.h3,{children:\"TooltipContent\"}),`\n`,(0,o.jsx)(t.p,{children:\"Includes the content that will be displayed in the open tooltip.\"}),`\n`,(0,o.jsx)(l,{data:[{name:\"side\",required:!1,default:'\"top\"',type:'\"top\" | \"right\" | \"bottom\" | \"left\"',description:\"The ideal side of the trigger to render on when it's open.\"},{name:\"sideOffset\",required:!1,default:\"0\",type:\"number\",description:\"The pixel distance from the trigger.\"},{name:\"align\",required:!1,default:'\"center\"',type:'\"start\" | \"center\" | \"end\"',description:\"The desired alignment with the trigger, which may adjust if collisions happen.\"},{name:\"alignOffset\",required:!1,default:\"0\",type:\"number\",description:'A pixel offset from the \"start\" or \"end\" alignment choices.'}]}),`\n`,(0,o.jsx)(d,{data:[{attribute:\"[data-state]\",values:'\"open\" | \"closed\"'},{attribute:\"[data-side]\",values:'\"top\" | \"right\" | \"bottom\" | \"left\"'},{attribute:\"[data-align]\",values:'\"start\" | \"center\" | \"end\"'}]}),`\n`,(0,o.jsx)(t.h3,{children:\"TooltipArrow\"}),`\n`,(0,o.jsx)(t.p,{children:\"An optional arrow element for the tooltip, to be rendered within TooltipContent for visual association.\"}),`\n`,(0,o.jsx)(l,{data:[{name:\"asChild\",required:!1,type:\"boolean\",description:\"Changes the default rendering element passed as a child, merging its props and behavior.\"},{name:\"width\",required:!1,default:\"10\",type:\"number\",description:\"The arrow's width measured in pixels.\"},{name:\"height\",required:!1,default:\"5\",type:\"number\",description:\"The arrow's height measured in pixels.\"}]}),`\n`,(0,o.jsx)(t.h2,{children:\"Examples\"}),`\n`,(0,o.jsx)(t.h3,{children:\"Display arrow\"}),`\n`,(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:\"language-jsx\",children:`<TooltipRoot>\n  <TooltipTrigger asChild>\n    <button type=\"button\" style={{ width: 200, border: '1px solid #5f76bb', padding: 5 }}>\n      Hover me\n    </button>\n  </TooltipTrigger>\n  <TooltipPortal>\n    <TooltipContent>\n      tooltip message\n      <TooltipArrow />\n    </TooltipContent>\n  </TooltipPortal>\n</TooltipRoot>\n`})}),`\n`,(0,o.jsx)(t.h3,{children:\"Position Settings\"}),`\n`,(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:\"language-jsx\",children:`<TooltipRoot>\n  <TooltipTrigger asChild>\n    <button type=\"button\" style={{ width: 200, border: '1px solid #5f76bb', padding: 5 }}>\n      Hover me\n    </button>\n  </TooltipTrigger>\n  <TooltipPortal>\n    <TooltipContent side=\"bottom\" align=\"end\">\n      tooltip message\n      <TooltipArrow />\n    </TooltipContent>\n  </TooltipPortal>\n</TooltipRoot>\n`})})]})}function q(e={}){let{wrapper:t}=e.components||{};return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(g,e)})):g(e)}var D=q;function r(e,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return A(k);})();\n;return Component;"
  },
  "_id": "components/tooltip.mdx",
  "_raw": {
    "sourceFilePath": "components/tooltip.mdx",
    "sourceFileName": "tooltip.mdx",
    "sourceFileDir": "components",
    "contentType": "mdx",
    "flattenedPath": "components/tooltip"
  },
  "type": "Doc",
  "slug": "/components/tooltip",
  "frontMatter": {
    "title": "Tooltip",
    "slug": "/components/tooltip"
  }
}