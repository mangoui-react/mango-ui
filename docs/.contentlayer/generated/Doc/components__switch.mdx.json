{
  "title": "Switch",
  "scope": "usage",
  "prevTitle": "Steps",
  "prevSlug": "/components/steps",
  "nextTitle": "Tabs",
  "nextSlug": "/components/tabs",
  "body": {
    "raw": "\n# Switch\n\n<Description>A control that lets the user toggle between checked and unchecked states.</Description>\n\n<DemoContainer>\n  <SwitchDemo />\n  <DemoCodeBlock component=\"switch\" />\n</DemoContainer>\n\n## Installation\n\n<PackageManagers\n  command={{\n    npm: 'npm i @melio-ui/switch',\n    yarn: 'yarn add @melio-ui/switch',\n    pnpm: 'pnpm add @melio-ui/switch',\n    bun: 'bun add @melio-ui/switch',\n  }}\n/>\n\n## Import\n\n<ImportSyntax\n  command={{\n    individual: `import { \n  SwitchRoot,\n  SwitchTrack,\n  SwitchThumb,\n  SwitchLabel,\n} from '@melio-ui/switch';`,\n    global: `import { \n  SwitchRoot,\n  SwitchTrack,\n  SwitchThumb,\n  SwitchLabel,\n} from '@melio-ui/react';`,\n  }}\n/>\n\n- **SwitchRoot**: All parts of the switch are included.\n- **SwitchTrack**: It represents the switch's background, indicating on and off states with different colors or styles.\n- **SwitchThumb**: It is the interactive element that toggles between on and off states.\n- **SwitchLabel**: It displays text or content next to the switch to clarify its purpose.\n\n### Another way to import\n\n```js\n'use client';\n\nimport { Switch } from '@melio-ui/switch';\n\n<Switch.Root>\n  <Switch.Track>\n    <Switch.Thumb />\n  </Switch.Track>\n  <Switch.Label>Label</Switch.Label>\n</Switch.Root>;\n```\n\n> 'use client' must be used when rendering on the server side.\n\n## API Reference\n\n### SwitchRoot\n\nAll parts of the switch are included.\n\n<PropsTable\n  data={[\n    {\n      name: 'checked',\n      required: false,\n      type: 'boolean',\n      description: 'Set whether to check or not.',\n    },\n    {\n      name: 'defaultChecked',\n      required: false,\n      type: 'boolean',\n      description:\n        'The checked state of the switch when it is first rendered. Use this when there is no need to control the checked state.',\n    },\n    {\n      name: 'disabled',\n      required: false,\n      type: 'boolean',\n      description: 'Determines whether the switch is inactive.',\n    },\n    {\n      name: 'inputProps',\n      required: false,\n      type: (\n        <>{`React.\n      InputHTMLAttributes\n      <HTMLInputElement>`}</>\n      ),\n      description: 'Attributes assigned to the input element.',\n    },\n    {\n      name: 'onCheckedChange',\n      required: false,\n      type: '(checked: boolean) => void',\n      description:\n        'This is an event handler that is triggered when the state of the switch changes.',\n    },\n  ]}\n/>\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-state]',\n      values: '\"checked\" | \"unchecked\"',\n    },\n    {\n      attribute: '[data-disabled]',\n      values: 'Visible when disabled',\n    },\n    {\n      attribute: '[data-readonly]',\n      values: 'Visible when read-only',\n    },\n  ]}\n/>\n\n### SwitchTrack\n\nIt represents the switch's background, indicating on and off states with different colors or styles.\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-state]',\n      values: '\"checked\" | \"unchecked\"',\n    },\n    {\n      attribute: '[data-disabled]',\n      values: 'Visible when disabled',\n    },\n    {\n      attribute: '[data-readonly]',\n      values: 'Visible when read-only',\n    },\n  ]}\n/>\n\n### SwitchThumb\n\nIt is the interactive element that toggles between on and off states.\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-state]',\n      values: '\"checked\" | \"unchecked\"',\n    },\n    {\n      attribute: '[data-disabled]',\n      values: 'Visible when disabled',\n    },\n    {\n      attribute: '[data-readonly]',\n      values: 'Visible when read-only',\n    },\n  ]}\n/>\n\n### SwitchLabel\n\nIt displays text or content next to the switch to clarify its purpose.\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-state]',\n      values: '\"checked\" | \"unchecked\"',\n    },\n    {\n      attribute: '[data-disabled]',\n      values: 'Visible when disabled',\n    },\n    {\n      attribute: '[data-readonly]',\n      values: 'Visible when read-only',\n    },\n  ]}\n/>\n\n## Examples\n\n### defaultChecked\n\n```jsx\n<SwitchRoot defaultChecked>\n  <SwitchTrack>\n    <SwitchThumb />\n  </SwitchTrack>\n</SwitchRoot>\n```\n\n### disabled\n\n```jsx\n<SwitchRoot disabled>\n  <SwitchTrack>\n    <SwitchThumb />\n  </SwitchTrack>\n</SwitchRoot>\n```\n\n### Display Label\n\n```jsx\n<SwitchRoot defaultChecked>\n  <SwitchTrack>\n    <SwitchThumb />\n  </SwitchTrack>\n  <SwitchLabel>Label</SwitchLabel>\n</SwitchRoot>\n```\n\n### Display checked/unchecked status text within the SwitchTrack.\n\n```jsx render=true\nfunction DisplayText() {\n  const [checked, setChecked] = React.useState(false);\n\n  return (\n    <SwitchRoot checked={checked} onCheckedChange={setChecked}>\n      <SwitchTrack>\n        <SwitchThumb />\n        {checked ? (\n          <span style={{ margin: '0 28px 0 5px', color: '#fff' }}>open</span>\n        ) : (\n          <span style={{ margin: '0 5px 0 28px' }}>close</span>\n        )}\n      </SwitchTrack>\n    </SwitchRoot>\n  );\n}\n\nrender(<DisplayText />);\n```\n",
    "code": "var Component=(()=>{var g=Object.create;var s=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var S=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var y=(n,t)=>()=>(t||n((t={exports:{}}).exports,t),t.exports),T=(n,t)=>{for(var i in t)s(n,i,{get:t[i],enumerable:!0})},w=(n,t,i,a)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let c of f(t))!x.call(n,c)&&c!==i&&s(n,c,{get:()=>t[c],enumerable:!(a=k(t,c))||a.enumerable});return n};var v=(n,t,i)=>(i=n!=null?g(S(n)):{},w(t||!n||!n.__esModule?s(i,\"default\",{value:n,enumerable:!0}):i,n)),R=n=>w(s({},\"__esModule\",{value:!0}),n);var p=y((N,m)=>{m.exports=_jsx_runtime});var j={};T(j,{default:()=>L,frontmatter:()=>D});var e=v(p()),D={title:\"Switch\",prevTitle:\"Steps\",prevSlug:\"/components/steps\",nextTitle:\"Tabs\",nextSlug:\"/components/tabs\"};function b(n){let t=Object.assign({h1:\"h1\",h2:\"h2\",ul:\"ul\",li:\"li\",strong:\"strong\",h3:\"h3\",pre:\"pre\",code:\"code\",blockquote:\"blockquote\",p:\"p\"},n.components),{Description:i,DemoContainer:a,SwitchDemo:c,DemoCodeBlock:h,PackageManagers:l,ImportSyntax:d,PropsTable:u,DataAttributesTable:o}=t;return o||r(\"DataAttributesTable\",!0),h||r(\"DemoCodeBlock\",!0),a||r(\"DemoContainer\",!0),i||r(\"Description\",!0),d||r(\"ImportSyntax\",!0),l||r(\"PackageManagers\",!0),u||r(\"PropsTable\",!0),c||r(\"SwitchDemo\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{children:\"Switch\"}),`\n`,(0,e.jsx)(i,{children:\"A control that lets the user toggle between checked and unchecked states.\"}),`\n`,(0,e.jsxs)(a,{children:[(0,e.jsx)(c,{}),(0,e.jsxs)(h,{component:\"switch\",children:[(0,e.jsx)(\"pre\",{title:\"index.tsx\",source:`import React from 'react';\n\nimport { SwitchLabel, SwitchRoot, SwitchThumb, SwitchTrack } from '@melio-ui/switch';\n\nimport './styles.css';\n\nexport default function SwitchDemo() {\n  return (\n    <SwitchRoot className=\"switch-root\">\n      <SwitchTrack className=\"switch-track\">\n        <SwitchThumb className=\"switch-thumb\" />\n      </SwitchTrack>\n    </SwitchRoot>\n  );\n}\n`,children:(0,e.jsx)(\"code\",{source:`import React from 'react';\n\nimport { SwitchLabel, SwitchRoot, SwitchThumb, SwitchTrack } from '@melio-ui/switch';\n\nimport './styles.css';\n\nexport default function SwitchDemo() {\n  return (\n    <SwitchRoot className=\"switch-root\">\n      <SwitchTrack className=\"switch-track\">\n        <SwitchThumb className=\"switch-thumb\" />\n      </SwitchTrack>\n    </SwitchRoot>\n  );\n}\n`})}),(0,e.jsx)(\"pre\",{title:\"styles.css\",source:`.switch-root {\n  display: inline-block;\n  cursor: pointer;\n  vertical-align: middle;\n  position: relative;\n}\n.switch-root[data-readonly] {\n  cursor: default;\n  pointer-events: none;\n}\n.switch-root[data-disabled] {\n  opacity: 0.5;\n  cursor: default;\n}\n.switch-root > input[type='checkbox'] {\n  cursor: inherit;\n  position: absolute;\n  opacity: 0;\n  width: 0.0625rem;\n  height: 0.0625rem;\n  margin: 0;\n  padding: 0;\n  z-index: 1;\n}\n\n.switch-label {\n  padding-left: 0.3125rem;\n  padding-right: 0.3125rem;\n}\n\n.switch-track {\n  display: inline-flex;\n  position: relative;\n  box-sizing: content-box;\n  height: 1.625rem;\n  border-radius: 0.9375rem;\n  background-color: rgba(255, 255, 255, 0.24);\n  padding: 0.125rem;\n  min-width: 3rem;\n  align-items: center;\n  cursor: pointer;\n  vertical-align: middle;\n  transition: background-color 500ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n}\n.switch-track[data-state='checked'] {\n  background-color: #208aff;\n}\n.switch-root[data-disabled] .switch-track {\n  cursor: not-allowed;\n}\n\n.switch-thumb {\n  background-color: white;\n  width: 1.375rem;\n  height: 1.375rem;\n  border-radius: 6.25rem;\n  box-shadow:\n    0 2px 1px -1px rgb(0 0 0 / 20%),\n    0 1px 1px 0 rgb(0 0 0 / 14%),\n    0 1px 3px 0 rgb(0 0 0 / 12%);\n  position: absolute;\n  top: 0.25rem;\n  left: 0.25rem;\n  transition: all 0.2s ease-in-out;\n}\n.switch-thumb[data-state='checked'] {\n  left: calc(100% - 1.625rem);\n}\n`,children:(0,e.jsx)(\"code\",{source:`.switch-root {\n  display: inline-block;\n  cursor: pointer;\n  vertical-align: middle;\n  position: relative;\n}\n.switch-root[data-readonly] {\n  cursor: default;\n  pointer-events: none;\n}\n.switch-root[data-disabled] {\n  opacity: 0.5;\n  cursor: default;\n}\n.switch-root > input[type='checkbox'] {\n  cursor: inherit;\n  position: absolute;\n  opacity: 0;\n  width: 0.0625rem;\n  height: 0.0625rem;\n  margin: 0;\n  padding: 0;\n  z-index: 1;\n}\n\n.switch-label {\n  padding-left: 0.3125rem;\n  padding-right: 0.3125rem;\n}\n\n.switch-track {\n  display: inline-flex;\n  position: relative;\n  box-sizing: content-box;\n  height: 1.625rem;\n  border-radius: 0.9375rem;\n  background-color: rgba(255, 255, 255, 0.24);\n  padding: 0.125rem;\n  min-width: 3rem;\n  align-items: center;\n  cursor: pointer;\n  vertical-align: middle;\n  transition: background-color 500ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n}\n.switch-track[data-state='checked'] {\n  background-color: #208aff;\n}\n.switch-root[data-disabled] .switch-track {\n  cursor: not-allowed;\n}\n\n.switch-thumb {\n  background-color: white;\n  width: 1.375rem;\n  height: 1.375rem;\n  border-radius: 6.25rem;\n  box-shadow:\n    0 2px 1px -1px rgb(0 0 0 / 20%),\n    0 1px 1px 0 rgb(0 0 0 / 14%),\n    0 1px 3px 0 rgb(0 0 0 / 12%);\n  position: absolute;\n  top: 0.25rem;\n  left: 0.25rem;\n  transition: all 0.2s ease-in-out;\n}\n.switch-thumb[data-state='checked'] {\n  left: calc(100% - 1.625rem);\n}\n`})})]})]}),`\n`,(0,e.jsx)(t.h2,{children:\"Installation\"}),`\n`,(0,e.jsx)(l,{command:{npm:\"npm i @melio-ui/switch\",yarn:\"yarn add @melio-ui/switch\",pnpm:\"pnpm add @melio-ui/switch\",bun:\"bun add @melio-ui/switch\"}}),`\n`,(0,e.jsx)(t.h2,{children:\"Import\"}),`\n`,(0,e.jsx)(d,{command:{individual:`import { \n  SwitchRoot,\n  SwitchTrack,\n  SwitchThumb,\n  SwitchLabel,\n} from '@melio-ui/switch';`,global:`import { \n  SwitchRoot,\n  SwitchTrack,\n  SwitchThumb,\n  SwitchLabel,\n} from '@melio-ui/react';`}}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"SwitchRoot\"}),\": All parts of the switch are included.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"SwitchTrack\"}),\": It represents the switch's background, indicating on and off states with different colors or styles.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"SwitchThumb\"}),\": It is the interactive element that toggles between on and off states.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"SwitchLabel\"}),\": It displays text or content next to the switch to clarify its purpose.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{children:\"Another way to import\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-js\",children:`'use client';\n\nimport { Switch } from '@melio-ui/switch';\n\n<Switch.Root>\n  <Switch.Track>\n    <Switch.Thumb />\n  </Switch.Track>\n  <Switch.Label>Label</Switch.Label>\n</Switch.Root>;\n`})}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsx)(t.p,{children:\"'use client' must be used when rendering on the server side.\"}),`\n`]}),`\n`,(0,e.jsx)(t.h2,{children:\"API Reference\"}),`\n`,(0,e.jsx)(t.h3,{children:\"SwitchRoot\"}),`\n`,(0,e.jsx)(t.p,{children:\"All parts of the switch are included.\"}),`\n`,(0,e.jsx)(u,{data:[{name:\"checked\",required:!1,type:\"boolean\",description:\"Set whether to check or not.\"},{name:\"defaultChecked\",required:!1,type:\"boolean\",description:\"The checked state of the switch when it is first rendered. Use this when there is no need to control the checked state.\"},{name:\"disabled\",required:!1,type:\"boolean\",description:\"Determines whether the switch is inactive.\"},{name:\"inputProps\",required:!1,type:(0,e.jsx)(e.Fragment,{children:`React.\n      InputHTMLAttributes\n      <HTMLInputElement>`}),description:\"Attributes assigned to the input element.\"},{name:\"onCheckedChange\",required:!1,type:\"(checked: boolean) => void\",description:\"This is an event handler that is triggered when the state of the switch changes.\"}]}),`\n`,(0,e.jsx)(o,{data:[{attribute:\"[data-state]\",values:'\"checked\" | \"unchecked\"'},{attribute:\"[data-disabled]\",values:\"Visible when disabled\"},{attribute:\"[data-readonly]\",values:\"Visible when read-only\"}]}),`\n`,(0,e.jsx)(t.h3,{children:\"SwitchTrack\"}),`\n`,(0,e.jsx)(t.p,{children:\"It represents the switch's background, indicating on and off states with different colors or styles.\"}),`\n`,(0,e.jsx)(o,{data:[{attribute:\"[data-state]\",values:'\"checked\" | \"unchecked\"'},{attribute:\"[data-disabled]\",values:\"Visible when disabled\"},{attribute:\"[data-readonly]\",values:\"Visible when read-only\"}]}),`\n`,(0,e.jsx)(t.h3,{children:\"SwitchThumb\"}),`\n`,(0,e.jsx)(t.p,{children:\"It is the interactive element that toggles between on and off states.\"}),`\n`,(0,e.jsx)(o,{data:[{attribute:\"[data-state]\",values:'\"checked\" | \"unchecked\"'},{attribute:\"[data-disabled]\",values:\"Visible when disabled\"},{attribute:\"[data-readonly]\",values:\"Visible when read-only\"}]}),`\n`,(0,e.jsx)(t.h3,{children:\"SwitchLabel\"}),`\n`,(0,e.jsx)(t.p,{children:\"It displays text or content next to the switch to clarify its purpose.\"}),`\n`,(0,e.jsx)(o,{data:[{attribute:\"[data-state]\",values:'\"checked\" | \"unchecked\"'},{attribute:\"[data-disabled]\",values:\"Visible when disabled\"},{attribute:\"[data-readonly]\",values:\"Visible when read-only\"}]}),`\n`,(0,e.jsx)(t.h2,{children:\"Examples\"}),`\n`,(0,e.jsx)(t.h3,{children:\"defaultChecked\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`<SwitchRoot defaultChecked>\n  <SwitchTrack>\n    <SwitchThumb />\n  </SwitchTrack>\n</SwitchRoot>\n`})}),`\n`,(0,e.jsx)(t.h3,{children:\"disabled\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`<SwitchRoot disabled>\n  <SwitchTrack>\n    <SwitchThumb />\n  </SwitchTrack>\n</SwitchRoot>\n`})}),`\n`,(0,e.jsx)(t.h3,{children:\"Display Label\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`<SwitchRoot defaultChecked>\n  <SwitchTrack>\n    <SwitchThumb />\n  </SwitchTrack>\n  <SwitchLabel>Label</SwitchLabel>\n</SwitchRoot>\n`})}),`\n`,(0,e.jsx)(t.h3,{children:\"Display checked/unchecked status text within the SwitchTrack.\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",render:\"true\",children:`function DisplayText() {\n  const [checked, setChecked] = React.useState(false);\n\n  return (\n    <SwitchRoot checked={checked} onCheckedChange={setChecked}>\n      <SwitchTrack>\n        <SwitchThumb />\n        {checked ? (\n          <span style={{ margin: '0 28px 0 5px', color: '#fff' }}>open</span>\n        ) : (\n          <span style={{ margin: '0 5px 0 28px' }}>close</span>\n        )}\n      </SwitchTrack>\n    </SwitchRoot>\n  );\n}\n\nrender(<DisplayText />);\n`})})]})}function C(n={}){let{wrapper:t}=n.components||{};return t?(0,e.jsx)(t,Object.assign({},n,{children:(0,e.jsx)(b,n)})):b(n)}var L=C;function r(n,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return R(j);})();\n;return Component;"
  },
  "_id": "components/switch.mdx",
  "_raw": {
    "sourceFilePath": "components/switch.mdx",
    "sourceFileName": "switch.mdx",
    "sourceFileDir": "components",
    "contentType": "mdx",
    "flattenedPath": "components/switch"
  },
  "type": "Doc",
  "slug": "/components/switch",
  "frontMatter": {
    "title": "Switch",
    "slug": "/components/switch"
  }
}