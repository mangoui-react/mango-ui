{
  "title": "Alert",
  "scope": "usage",
  "prevTitle": "Accordion",
  "prevSlug": "/components/accordion",
  "nextTitle": "Avatar",
  "nextSlug": "/components/avatar",
  "body": {
    "raw": "\n# Alert\n\n<Description>Displays a description for the user's attention.</Description>\n\n<DemoContainer>\n  <AlertDemo />\n  <DemoCodeBlock component=\"alert\" />\n</DemoContainer>\n\n## Installation\n\n<PackageManagers\n  command={{\n    npm: 'npm i @melio-ui/alert',\n    yarn: 'yarn add @melio-ui/alert',\n    pnpm: 'pnpm add @melio-ui/alert',\n    bun: 'bun add @melio-ui/alert',\n  }}\n/>\n\n## Import\n\n<ImportSyntax\n  command={{\n    individual: `import { AlertContent, AlertRoot, AlertStatusIcon } from '@melio-ui/alert';`,\n    global: `import { AlertContent, AlertRoot, AlertStatusIcon } from '@melio-ui/react';`,\n  }}\n/>\n\n- **AlertRoot**: All parts of the alert are included.\n- **AlertStatusIcon**: Alert icon changes depending on status.\n- **AlertContent**: The content of the alert to be announced by screen readers.\n\n### Another way to import\n\n```js\n'use client';\n\nimport { Alert } from '@melio-ui/alert';\n\n<Alert.Root>\n  <Alert.StatusIcon />\n  <Alert.Content>Content1</Alert.Content>\n</Alert.Root>;\n```\n\n> 'use client' must be used when rendering on the server side.\n\n## API Reference\n\n### AlertRoot\n\nAll parts of the alert are included.\n\n<PropsTable\n  data={[\n    {\n      name: 'status',\n      required: false,\n      default: '\"info\"',\n      type: (\n        <>\n          TypeAttributes.Status\n          <br />\n          <br />\n          \"info\" | \"success\" | \"warning\" | \"error\"\n        </>\n      ),\n      description: 'The status of the alert.',\n    },\n  ]}\n/>\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-status]',\n      values: '\"info\" | \"success\" | \"warning\" | \"error\"',\n    },\n  ]}\n/>\n\n### AlertStatusIcon\n\nAlert icon changes depending on status.\n\n<PropsTable\n  data={[\n    {\n      name: 'info',\n      required: false,\n      default: '<InfoIcon />',\n      type: 'React.ReactNode',\n      description: 'displaying an icon for info status.',\n    },\n    {\n      name: 'success',\n      required: false,\n      default: '<SuccessIcon />',\n      type: 'React.ReactNode',\n      description: 'displaying an icon for success status.',\n    },\n    {\n      name: 'warning',\n      required: false,\n      default: '<WarningIcon />',\n      type: 'React.ReactNode',\n      description: 'displaying an icon for warning status.',\n    },\n    {\n      name: 'error',\n      required: false,\n      default: '<ErrorIcon />',\n      type: 'React.ReactNode',\n      description: 'displaying an icon for error status.',\n    },\n  ]}\n/>\n\n### AlertContent\n\nThe content of the alert to be announced by screen readers.\n\n<DataAttributesTable\n  data={[\n    {\n      attribute: '[data-status]',\n      values: '\"info\" | \"success\" | \"warning\" | \"error\"',\n    },\n  ]}\n/>\n\n## Examples\n\n### Set the status value\n\n```jsx\n<Alert.Root status=\"success\">\n  <Alert.StatusIcon />\n  <Alert.Content>This is an success alert</Alert.Content>\n</Alert.Root>\n```\n\n### Custom\n\n```jsx\n<Alert.Root>\n  <Alert.StatusIcon />\n  <Alert.Content>\n    <div style={{ marginTop: -2, fontWeight: 'bold', marginBottom: '0.35em' }}>information</div>\n    <div>This is an info alert</div>\n  </Alert.Content>\n</Alert.Root>\n```\n",
    "code": "var Component=(()=>{var g=Object.create;var s=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var R=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var N=(n,t)=>()=>(t||n((t={exports:{}}).exports,t),t.exports),x=(n,t)=>{for(var r in t)s(n,r,{get:t[r],enumerable:!0})},f=(n,t,r,l)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let o of R(t))!y.call(n,o)&&o!==r&&s(n,o,{get:()=>t[o],enumerable:!(l=b(t,o))||l.enumerable});return n};var I=(n,t,r)=>(r=n!=null?g(C(n)):{},f(t||!n||!n.__esModule?s(r,\"default\",{value:n,enumerable:!0}):r,n)),S=n=>f(s({},\"__esModule\",{value:!0}),n);var h=N((j,A)=>{A.exports=_jsx_runtime});var D={};x(D,{default:()=>w,frontmatter:()=>T});var e=I(h()),T={title:\"Alert\",prevTitle:\"Accordion\",prevSlug:\"/components/accordion\",nextTitle:\"Avatar\",nextSlug:\"/components/avatar\"};function p(n){let t=Object.assign({h1:\"h1\",h2:\"h2\",ul:\"ul\",li:\"li\",strong:\"strong\",h3:\"h3\",pre:\"pre\",code:\"code\",blockquote:\"blockquote\",p:\"p\",br:\"br\"},n.components),{Description:r,DemoContainer:l,AlertDemo:o,DemoCodeBlock:d,PackageManagers:u,ImportSyntax:m,PropsTable:c,DataAttributesTable:i}=t;return o||a(\"AlertDemo\",!0),i||a(\"DataAttributesTable\",!0),d||a(\"DemoCodeBlock\",!0),l||a(\"DemoContainer\",!0),r||a(\"Description\",!0),m||a(\"ImportSyntax\",!0),u||a(\"PackageManagers\",!0),c||a(\"PropsTable\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{children:\"Alert\"}),`\n`,(0,e.jsx)(r,{children:\"Displays a description for the user's attention.\"}),`\n`,(0,e.jsxs)(l,{children:[(0,e.jsx)(o,{}),(0,e.jsxs)(d,{component:\"alert\",children:[(0,e.jsx)(\"pre\",{title:\"index.tsx\",source:`import React from 'react';\n\nimport { AlertContent, AlertRoot, AlertStatusIcon } from '@melio-ui/alert';\n\nimport './styles.css';\n\nexport default function AlertDemo() {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', gap: 10 }}>\n      <AlertRoot className=\"alert-root\">\n        <AlertStatusIcon className=\"alert-icon\" />\n        <AlertContent className=\"alert-content\">This is an info alert</AlertContent>\n      </AlertRoot>\n\n      <AlertRoot className=\"alert-root\" status=\"success\">\n        <AlertStatusIcon className=\"alert-icon\" />\n        <AlertContent className=\"alert-content\">This is an success alert</AlertContent>\n      </AlertRoot>\n\n      <AlertRoot className=\"alert-root\" status=\"warning\">\n        <AlertStatusIcon className=\"alert-icon\" />\n        <AlertContent className=\"alert-content\">This is an warning alert</AlertContent>\n      </AlertRoot>\n\n      <AlertRoot className=\"alert-root\" status=\"error\">\n        <AlertStatusIcon className=\"alert-icon\" />\n        <AlertContent className=\"alert-content\">This is an error alert</AlertContent>\n      </AlertRoot>\n    </div>\n  );\n}\n`,children:(0,e.jsx)(\"code\",{source:`import React from 'react';\n\nimport { AlertContent, AlertRoot, AlertStatusIcon } from '@melio-ui/alert';\n\nimport './styles.css';\n\nexport default function AlertDemo() {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', gap: 10 }}>\n      <AlertRoot className=\"alert-root\">\n        <AlertStatusIcon className=\"alert-icon\" />\n        <AlertContent className=\"alert-content\">This is an info alert</AlertContent>\n      </AlertRoot>\n\n      <AlertRoot className=\"alert-root\" status=\"success\">\n        <AlertStatusIcon className=\"alert-icon\" />\n        <AlertContent className=\"alert-content\">This is an success alert</AlertContent>\n      </AlertRoot>\n\n      <AlertRoot className=\"alert-root\" status=\"warning\">\n        <AlertStatusIcon className=\"alert-icon\" />\n        <AlertContent className=\"alert-content\">This is an warning alert</AlertContent>\n      </AlertRoot>\n\n      <AlertRoot className=\"alert-root\" status=\"error\">\n        <AlertStatusIcon className=\"alert-icon\" />\n        <AlertContent className=\"alert-content\">This is an error alert</AlertContent>\n      </AlertRoot>\n    </div>\n  );\n}\n`})}),(0,e.jsx)(\"pre\",{title:\"styles.css\",source:`.alert-root {\n  display: flex;\n  align-items: center;\n  border-radius: 0.375rem;\n  padding: 0.375rem 1rem;\n\n  background-color: #68a7eb;\n  color: #fff;\n}\n\n.alert-root[data-status='success'] {\n  background-color: #32c768;\n  color: #fff;\n}\n\n.alert-root[data-status='warning'] {\n  background-color: #f59e0b;\n  color: #fff;\n}\n\n.alert-root[data-status='error'] {\n  background-color: #e23731;\n  color: #fff;\n}\n\n.alert-icon {\n  padding: 0.4375rem 0;\n  margin-right: 0.75rem;\n  width: 2.25rem;\n  height: 2.25rem;\n}\n\n.alert-content {\n  padding: 0.5rem 0;\n}\n`,children:(0,e.jsx)(\"code\",{source:`.alert-root {\n  display: flex;\n  align-items: center;\n  border-radius: 0.375rem;\n  padding: 0.375rem 1rem;\n\n  background-color: #68a7eb;\n  color: #fff;\n}\n\n.alert-root[data-status='success'] {\n  background-color: #32c768;\n  color: #fff;\n}\n\n.alert-root[data-status='warning'] {\n  background-color: #f59e0b;\n  color: #fff;\n}\n\n.alert-root[data-status='error'] {\n  background-color: #e23731;\n  color: #fff;\n}\n\n.alert-icon {\n  padding: 0.4375rem 0;\n  margin-right: 0.75rem;\n  width: 2.25rem;\n  height: 2.25rem;\n}\n\n.alert-content {\n  padding: 0.5rem 0;\n}\n`})})]})]}),`\n`,(0,e.jsx)(t.h2,{children:\"Installation\"}),`\n`,(0,e.jsx)(u,{command:{npm:\"npm i @melio-ui/alert\",yarn:\"yarn add @melio-ui/alert\",pnpm:\"pnpm add @melio-ui/alert\",bun:\"bun add @melio-ui/alert\"}}),`\n`,(0,e.jsx)(t.h2,{children:\"Import\"}),`\n`,(0,e.jsx)(m,{command:{individual:\"import { AlertContent, AlertRoot, AlertStatusIcon } from '@melio-ui/alert';\",global:\"import { AlertContent, AlertRoot, AlertStatusIcon } from '@melio-ui/react';\"}}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"AlertRoot\"}),\": All parts of the alert are included.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"AlertStatusIcon\"}),\": Alert icon changes depending on status.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"AlertContent\"}),\": The content of the alert to be announced by screen readers.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{children:\"Another way to import\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-js\",children:`'use client';\n\nimport { Alert } from '@melio-ui/alert';\n\n<Alert.Root>\n  <Alert.StatusIcon />\n  <Alert.Content>Content1</Alert.Content>\n</Alert.Root>;\n`})}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsx)(t.p,{children:\"'use client' must be used when rendering on the server side.\"}),`\n`]}),`\n`,(0,e.jsx)(t.h2,{children:\"API Reference\"}),`\n`,(0,e.jsx)(t.h3,{children:\"AlertRoot\"}),`\n`,(0,e.jsx)(t.p,{children:\"All parts of the alert are included.\"}),`\n`,(0,e.jsx)(c,{data:[{name:\"status\",required:!1,default:'\"info\"',type:(0,e.jsxs)(e.Fragment,{children:[\"TypeAttributes.Status\",(0,e.jsx)(t.br,{}),(0,e.jsx)(t.br,{}),'\"info\" | \"success\" | \"warning\" | \"error\"']}),description:\"The status of the alert.\"}]}),`\n`,(0,e.jsx)(i,{data:[{attribute:\"[data-status]\",values:'\"info\" | \"success\" | \"warning\" | \"error\"'}]}),`\n`,(0,e.jsx)(t.h3,{children:\"AlertStatusIcon\"}),`\n`,(0,e.jsx)(t.p,{children:\"Alert icon changes depending on status.\"}),`\n`,(0,e.jsx)(c,{data:[{name:\"info\",required:!1,default:\"<InfoIcon />\",type:\"React.ReactNode\",description:\"displaying an icon for info status.\"},{name:\"success\",required:!1,default:\"<SuccessIcon />\",type:\"React.ReactNode\",description:\"displaying an icon for success status.\"},{name:\"warning\",required:!1,default:\"<WarningIcon />\",type:\"React.ReactNode\",description:\"displaying an icon for warning status.\"},{name:\"error\",required:!1,default:\"<ErrorIcon />\",type:\"React.ReactNode\",description:\"displaying an icon for error status.\"}]}),`\n`,(0,e.jsx)(t.h3,{children:\"AlertContent\"}),`\n`,(0,e.jsx)(t.p,{children:\"The content of the alert to be announced by screen readers.\"}),`\n`,(0,e.jsx)(i,{data:[{attribute:\"[data-status]\",values:'\"info\" | \"success\" | \"warning\" | \"error\"'}]}),`\n`,(0,e.jsx)(t.h2,{children:\"Examples\"}),`\n`,(0,e.jsx)(t.h3,{children:\"Set the status value\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`<Alert.Root status=\"success\">\n  <Alert.StatusIcon />\n  <Alert.Content>This is an success alert</Alert.Content>\n</Alert.Root>\n`})}),`\n`,(0,e.jsx)(t.h3,{children:\"Custom\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`<Alert.Root>\n  <Alert.StatusIcon />\n  <Alert.Content>\n    <div style={{ marginTop: -2, fontWeight: 'bold', marginBottom: '0.35em' }}>information</div>\n    <div>This is an info alert</div>\n  </Alert.Content>\n</Alert.Root>\n`})})]})}function v(n={}){let{wrapper:t}=n.components||{};return t?(0,e.jsx)(t,Object.assign({},n,{children:(0,e.jsx)(p,n)})):p(n)}var w=v;function a(n,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return S(D);})();\n;return Component;"
  },
  "_id": "components/alert.mdx",
  "_raw": {
    "sourceFilePath": "components/alert.mdx",
    "sourceFileName": "alert.mdx",
    "sourceFileDir": "components",
    "contentType": "mdx",
    "flattenedPath": "components/alert"
  },
  "type": "Doc",
  "slug": "/components/alert",
  "frontMatter": {
    "title": "Alert",
    "slug": "/components/alert"
  }
}